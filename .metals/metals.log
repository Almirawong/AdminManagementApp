2022.07.05 18:07:39 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.05 18:07:40 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.05 18:07:40 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.68.1.
2022.07.05 18:07:41 INFO  time: initialize in 0.97s
2022.07.05 18:07:42 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.05 18:07:42 WARN  Build server is not auto-connectable.
2022.07.05 18:07:44 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.05 18:07:47 INFO  no build target found for C:\Users\almir\AdminApp\build.sbt. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.05 18:07:48 INFO  time: code lens generation in 4.22s
2022.07.05 18:13:09 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.05 19:29:31 INFO  shutting down Metals
2022.07.05 21:28:34 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.05 21:28:36 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.05 21:28:36 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.68.1.
2022.07.05 21:28:37 INFO  time: initialize in 1.2s
2022.07.05 21:28:37 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.05 21:28:37 WARN  Build server is not auto-connectable.
2022.07.05 22:36:59 INFO  shutting down Metals
2022.07.07 11:51:58 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.07 11:52:00 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.07 11:52:00 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.68.1.
2022.07.07 11:52:01 INFO  time: initialize in 1.36s
2022.07.07 11:52:01 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.07 11:52:01 WARN  Build server is not auto-connectable.
2022.07.07 11:52:02 INFO  skipping build import with status 'Requested'
2022.07.07 11:54:26 INFO  shutting down Metals
2022.07.07 21:46:41 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.07 21:46:44 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.07 21:46:44 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.68.1.
2022.07.07 21:46:45 INFO  time: initialize in 1.25s
2022.07.07 21:46:45 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.07 21:46:45 WARN  Build server is not auto-connectable.
2022.07.07 21:46:46 INFO  skipping build import with status 'Requested'
2022.07.07 21:50:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.07 21:50:56 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.07 21:50:58 INFO  time: code lens generation in 7.08s
Jul 07, 2022 9:51:05 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: 66 is not a valid line number, allowed [0..0]
	at scala.meta.internal.inputs.InternalInput.lineToOffset(InternalInput.scala:37)
	at scala.meta.internal.inputs.InternalInput.lineToOffset$(InternalInput.scala:32)
	at scala.meta.inputs.Input$VirtualFile.lineToOffset(Input.scala:80)
	at scala.meta.inputs.Position$Range$.apply(Position.scala:59)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionPositionLspInverse.toMeta(MtagsEnrichments.scala:179)
	at scala.meta.internal.parsing.Trees.$anonfun$findLastEnclosingAt$4(Trees.scala:77)
	at scala.Option.flatMap(Option.scala:283)
	at scala.meta.internal.parsing.Trees.findLastEnclosingAt(Trees.scala:76)
	at scala.meta.internal.metals.codeactions.PatternMatchRefactor.contribute(PatternMatchRefactor.scala:96)
	at scala.meta.internal.metals.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:66)
	at scala.meta.internal.metals.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:65)
	at scala.collection.immutable.List.collect(List.scala:275)
	at scala.meta.internal.metals.CodeActionProvider.codeActions(CodeActionProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeAction$1(MetalsLanguageServer.scala:1652)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLanguageServer.codeAction(MetalsLanguageServer.scala:1651)
	... 16 more

2022.07.07 21:54:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.07 21:56:54 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.07 22:02:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.07 22:07:58 WARN  no build target for: C:\Users\almir\AddressApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.07 22:08:52 INFO  shutting down Metals
2022.07.07 22:09:33 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.07 22:09:35 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.07 22:09:35 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.68.1.
2022.07.07 22:09:36 INFO  time: initialize in 0.95s
2022.07.07 22:09:36 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.07 22:09:36 WARN  Build server is not auto-connectable.
2022.07.07 22:09:36 INFO  skipping build import with status 'Requested'
2022.07.07 22:09:38 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.07 22:09:41 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.07 22:09:42 INFO  time: code lens generation in 3.79s
2022.07.07 22:19:04 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Person.scala
2022.07.07 22:21:22 INFO  shutting down Metals
2022.07.09 16:16:59 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.09 16:17:04 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.09 16:17:04 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.0.
2022.07.09 16:17:07 INFO  time: initialize in 3.15s
2022.07.09 16:17:09 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.09 16:17:09 WARN  Build server is not auto-connectable.
2022.07.09 16:17:11 INFO  skipping build import with status 'Requested'
2022.07.09 16:17:17 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Person.scala
2022.07.09 16:17:32 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\model\Person.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.09 16:17:38 INFO  time: code lens generation in 21s
2022.07.09 21:36:21 INFO  shutting down Metals
2022.07.10 16:36:14 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.10 16:36:16 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.10 16:36:16 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.0.
2022.07.10 16:36:17 INFO  time: initialize in 0.97s
2022.07.10 16:36:17 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.10 16:36:17 WARN  Build server is not auto-connectable.
2022.07.10 16:36:18 INFO  skipping build import with status 'Requested'
2022.07.10 16:36:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Person.scala
2022.07.10 16:36:19 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.10 16:36:23 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.10 16:36:23 INFO  no build target found for C:\Users\almir\AdminApp\build.sbt. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.10 16:36:25 INFO  time: code lens generation in 5.19s
2022.07.10 16:36:25 INFO  time: code lens generation in 3.29s
2022.07.10 16:36:37 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
Jul 10, 2022 4:37:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: 105 is not a valid line number, allowed [0..0]
	at scala.meta.internal.inputs.InternalInput.lineToOffset(InternalInput.scala:37)
	at scala.meta.internal.inputs.InternalInput.lineToOffset$(InternalInput.scala:32)
	at scala.meta.inputs.Input$VirtualFile.lineToOffset(Input.scala:80)
	at scala.meta.inputs.Position$Range$.apply(Position.scala:59)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionPositionLspInverse.toMeta(MtagsEnrichments.scala:179)
	at scala.meta.internal.parsing.Trees.$anonfun$findLastEnclosingAt$4(Trees.scala:77)
	at scala.Option.flatMap(Option.scala:283)
	at scala.meta.internal.parsing.Trees.findLastEnclosingAt(Trees.scala:76)
	at scala.meta.internal.metals.codeactions.PatternMatchRefactor.contribute(PatternMatchRefactor.scala:96)
	at scala.meta.internal.metals.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:66)
	at scala.meta.internal.metals.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:65)
	at scala.collection.immutable.List.collect(List.scala:275)
	at scala.meta.internal.metals.CodeActionProvider.codeActions(CodeActionProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeAction$1(MetalsLanguageServer.scala:1652)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLanguageServer.codeAction(MetalsLanguageServer.scala:1651)
	... 16 more

2022.07.10 16:38:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:39:15 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 16:40:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 16:40:44 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:40:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:40:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:42:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:42:48 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:43:23 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:44:06 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:44:11 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:45:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:45:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:45:17 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:45:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:45:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:45:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:45:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:45:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:45:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:45:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.10 16:46:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
Exception in thread "pool-3-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.10 16:47:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:47:47 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:48:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
Exception in thread "pool-3-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.10 16:48:37 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
Jul 10, 2022 4:49:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1243
2022.07.10 16:49:12 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:49:21 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:49:21 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
Exception in thread "pool-3-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.10 16:49:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 16:50:21 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:35:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:35:45 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:35:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:36:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:36:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:36:09 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:36:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:36:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
Exception in thread "pool-3-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-7" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Jul 10, 2022 5:36:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1633
2022.07.10 17:38:45 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
Exception in thread "pool-3-thread-8" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-9" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Jul 10, 2022 5:39:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1790
Jul 10, 2022 5:39:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1803
2022.07.10 17:39:43 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:40:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:40:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 17:41:45 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 17:42:14 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 21:17:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
Jul 10, 2022 9:39:34 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: 12 is not a valid line number, allowed [0..11]
	at scala.meta.internal.inputs.InternalInput.lineToOffset(InternalInput.scala:37)
	at scala.meta.internal.inputs.InternalInput.lineToOffset$(InternalInput.scala:32)
	at scala.meta.inputs.Input$VirtualFile.lineToOffset(Input.scala:80)
	at scala.meta.inputs.Position$Range$.apply(Position.scala:59)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionPositionLspInverse.toMeta(MtagsEnrichments.scala:179)
	at scala.meta.internal.parsing.Trees.$anonfun$findLastEnclosingAt$4(Trees.scala:77)
	at scala.Option.flatMap(Option.scala:283)
	at scala.meta.internal.parsing.Trees.findLastEnclosingAt(Trees.scala:76)
	at scala.meta.internal.metals.codeactions.PatternMatchRefactor.contribute(PatternMatchRefactor.scala:96)
	at scala.meta.internal.metals.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:66)
	at scala.meta.internal.metals.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:65)
	at scala.collection.immutable.List.collect(List.scala:275)
	at scala.meta.internal.metals.CodeActionProvider.codeActions(CodeActionProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeAction$1(MetalsLanguageServer.scala:1652)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLanguageServer.codeAction(MetalsLanguageServer.scala:1651)
	... 15 more

2022.07.10 21:40:44 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 21:42:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 21:43:32 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 21:43:37 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 21:48:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 21:48:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 21:48:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 21:48:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 21:48:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
Jul 10, 2022 9:48:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2603
2022.07.10 21:49:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 21:49:49 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
Jul 10, 2022 9:50:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2769
2022.07.10 21:50:38 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 22:02:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.10 22:02:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.10 22:04:26 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.10 22:04:53 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.10 22:05:09 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
Jul 10, 2022 10:16:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2966
2022.07.10 22:16:14 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.10 22:16:14 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.10 22:16:14 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.10 22:17:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.10 22:18:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.10 22:29:40 INFO  shutting down Metals
2022.07.11 09:01:21 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.11 09:01:28 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.11 09:01:28 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.0.
2022.07.11 09:01:34 INFO  time: initialize in 5.68s
2022.07.11 09:01:37 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.11 09:01:38 WARN  Build server is not auto-connectable.
2022.07.11 09:01:39 INFO  skipping build import with status 'Requested'
2022.07.11 09:01:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.11 09:02:17 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala. Using presentation compiler with project's scala-library version: 3.1.3
Jul 11, 2022 9:02:31 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2022.07.11 09:02:31 INFO  time: code lens generation in 39s
2022.07.11 09:18:25 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.11 09:19:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.11 09:19:43 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
Jul 11, 2022 9:19:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-16.0.1/lib/src.zip%21/java.base/java/lang/Class.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2020, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.constant.ClassDesc;\nimport java.lang.invoke.TypeDescriptor;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.module.ModuleReader;\nimport java.lang.ref.SoftReference;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectStreamField;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.AnnotatedType;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Executable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.GenericDeclaration;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Member;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.RecordComponent;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.constant.Constable;\nimport java.net.URL;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport jdk.internal.loader.BootLoader;\nimport jdk.internal.loader.BuiltinClassLoader;\nimport jdk.internal.misc.Unsafe;\nimport jdk.internal.module.Resources;\nimport jdk.internal.reflect.CallerSensitive;\nimport jdk.internal.reflect.ConstantPool;\nimport jdk.internal.reflect.Reflection;\nimport jdk.internal.reflect.ReflectionFactory;\nimport jdk.internal.vm.annotation.ForceInline;\nimport jdk.internal.vm.annotation.IntrinsicCandidate;\nimport sun.invoke.util.Wrapper;\nimport sun.reflect.generics.factory.CoreReflectionFactory;\nimport sun.reflect.generics.factory.GenericsFactory;\nimport sun.reflect.generics.repository.ClassRepository;\nimport sun.reflect.generics.repository.MethodRepository;\nimport sun.reflect.generics.repository.ConstructorRepository;\nimport sun.reflect.generics.scope.ClassScope;\nimport sun.security.util.SecurityConstants;\nimport sun.reflect.annotation.*;\nimport sun.reflect.misc.ReflectUtil;\n\n/**\n * Instances of the class {@code Class} represent classes and\n * interfaces in a running Java application. An enum class and a record\n * class are kinds of class; an annotation interface is a kind of\n * interface. Every array also belongs to a class that is reflected as\n * a {@code Class} object that is shared by all arrays with the same\n * element type and number of dimensions.  The primitive Java types\n * ({@code boolean}, {@code byte}, {@code char}, {@code short}, {@code\n * int}, {@code long}, {@code float}, and {@code double}), and the\n * keyword {@code void} are also represented as {@code Class} objects.\n *\n * \u003cp\u003e {@code Class} has no public constructor. Instead a {@code Class}\n * object is constructed automatically by the Java Virtual Machine when\n * a class is derived from the bytes of a {@code class} file through\n * the invocation of one of the following methods:\n * \u003cul\u003e\n * \u003cli\u003e {@link ClassLoader#defineClass(String, byte[], int, int) ClassLoader::defineClass}\n * \u003cli\u003e {@link java.lang.invoke.MethodHandles.Lookup#defineClass(byte[])\n *      java.lang.invoke.MethodHandles.Lookup::defineClass}\n * \u003cli\u003e {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)\n *      java.lang.invoke.MethodHandles.Lookup::defineHiddenClass}\n * \u003c/ul\u003e\n *\n * \u003cp\u003e The methods of class {@code Class} expose many characteristics of a\n * class or interface. Most characteristics are derived from the {@code class}\n * file that the class loader passed to the Java Virtual Machine or\n * from the {@code class} file passed to {@code Lookup::defineClass}\n * or {@code Lookup::defineHiddenClass}.\n * A few characteristics are determined by the class loading environment\n * at run time, such as the module returned by {@link #getModule() getModule()}.\n *\n * \u003cp\u003e The following example uses a {@code Class} object to print the\n * class name of an object:\n *\n * \u003cblockquote\u003e\u003cpre\u003e\n *     void printClassName(Object obj) {\n *         System.out.println(\"The class of \" + obj +\n *                            \" is \" + obj.getClass().getName());\n *     }\n * \u003c/pre\u003e\u003c/blockquote\u003e\n *\n * It is also possible to get the {@code Class} object for a named\n * class or interface (or for {@code void}) using a \u003ci\u003eclass literal\u003c/i\u003e.\n * For example:\n *\n * \u003cblockquote\u003e\n *     {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}\n * \u003c/blockquote\u003e\n *\n * \u003cp\u003e Some methods of class {@code Class} expose whether the declaration of\n * a class or interface in Java source code was \u003cem\u003eenclosed\u003c/em\u003e within\n * another declaration. Other methods describe how a class or interface\n * is situated in a \u003cem\u003enest\u003c/em\u003e. A \u003ca id\u003d\"nest\"\u003enest\u003c/a\u003e is a set of\n * classes and interfaces, in the same run-time package, that\n * allow mutual access to their {@code private} members.\n * The classes and interfaces are known as \u003cem\u003enestmates\u003c/em\u003e.\n * One nestmate acts as the\n * \u003cem\u003enest host\u003c/em\u003e, and enumerates the other nestmates which\n * belong to the nest; each of them in turn records it as the nest host.\n * The classes and interfaces which belong to a nest, including its host, are\n * determined when\n * {@code class} files are generated, for example, a Java compiler\n * will typically record a top-level class as the host of a nest where the\n * other members are the classes and interfaces whose declarations are\n * enclosed within the top-level class declaration.\n *\n * \u003cp\u003e A class or interface created by the invocation of\n * {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)\n * Lookup::defineHiddenClass} is a {@linkplain Class#isHidden() \u003cem\u003ehidden\u003c/em\u003e}\n * class or interface.\n * All kinds of class, including enum classes and record classes, may be\n * hidden classes; all kinds of interface, including annotation interfaces,\n * may be hidden interfaces.\n *\n * The {@linkplain #getName() name of a hidden class or interface} is\n * not a \u003ca href\u003d\"ClassLoader.html#binary-name\"\u003ebinary name\u003c/a\u003e,\n * which means the following:\n * \u003cul\u003e\n * \u003cli\u003eA hidden class or interface cannot be referenced by the constant pools\n *     of other classes and interfaces.\n * \u003cli\u003eA hidden class or interface cannot be described in\n *     {@linkplain java.lang.constant.ConstantDesc \u003cem\u003enominal form\u003c/em\u003e} by\n *     {@link #describeConstable() Class::describeConstable},\n *     {@link ClassDesc#of(String) ClassDesc::of}, or\n *     {@link ClassDesc#ofDescriptor(String) ClassDesc::ofDescriptor}.\n * \u003cli\u003eA hidden class or interface cannot be discovered by {@link #forName Class::forName}\n *     or {@link ClassLoader#loadClass(String, boolean) ClassLoader::loadClass}.\n * \u003c/ul\u003e\n *\n * A hidden class or interface is never an array class, but may be\n * the element type of an array. In all other respects, the fact that\n * a class or interface is hidden has no bearing on the characteristics\n * exposed by the methods of class {@code Class}.\n *\n * @param \u003cT\u003e the type of the class modeled by this {@code Class}\n * object.  For example, the type of {@code String.class} is {@code\n * Class\u003cString\u003e}.  Use {@code Class\u003c?\u003e} if the class being modeled is\n * unknown.\n *\n * @see     java.lang.ClassLoader#defineClass(byte[], int, int)\n * @since   1.0\n * @jls 15.8.2 Class Literals\n */\npublic final class Class\u003cT\u003e implements java.io.Serializable,\n                              GenericDeclaration,\n                              Type,\n                              AnnotatedElement,\n                              TypeDescriptor.OfField\u003cClass\u003c?\u003e\u003e,\n                              Constable {\n    private static final int ANNOTATION\u003d 0x00002000;\n    private static final int ENUM      \u003d 0x00004000;\n    private static final int SYNTHETIC \u003d 0x00001000;\n\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n\n    /*\n     * Private constructor. Only the Java Virtual Machine creates Class objects.\n     * This constructor is not used and prevents the default constructor being\n     * generated.\n     */\n    private Class(ClassLoader loader, Class\u003c?\u003e arrayComponentType) {\n        // Initialize final field for classLoader.  The initialization value of non-null\n        // prevents future JIT optimizations from assuming this final field is null.\n        classLoader \u003d loader;\n        componentType \u003d arrayComponentType;\n    }\n\n    /**\n     * Converts the object to a string. The string representation is the\n     * string \"class\" or \"interface\", followed by a space, and then by the\n     * name of the class in the format returned by {@code getName}.\n     * If this {@code Class} object represents a primitive type,\n     * this method returns the name of the primitive type.  If\n     * this {@code Class} object represents void this method returns\n     * \"void\". If this {@code Class} object represents an array type,\n     * this method returns \"class \" followed by {@code getName}.\n     *\n     * @return a string representation of this {@code Class} object.\n     */\n    public String toString() {\n        return (isInterface() ? \"interface \" : (isPrimitive() ? \"\" : \"class \"))\n            + getName();\n    }\n\n    /**\n     * Returns a string describing this {@code Class}, including\n     * information about modifiers and type parameters.\n     *\n     * The string is formatted as a list of type modifiers, if any,\n     * followed by the kind of type (empty string for primitive types\n     * and {@code class}, {@code enum}, {@code interface},\n     * {@code @interface}, or {@code record} as appropriate), followed\n     * by the type\u0027s name, followed by an angle-bracketed\n     * comma-separated list of the type\u0027s type parameters, if any,\n     * including informative bounds on the type parameters, if any.\n     *\n     * A space is used to separate modifiers from one another and to\n     * separate any modifiers from the kind of type. The modifiers\n     * occur in canonical order. If there are no type parameters, the\n     * type parameter list is elided.\n     *\n     * For an array type, the string starts with the type name,\n     * followed by an angle-bracketed comma-separated list of the\n     * type\u0027s type parameters, if any, followed by a sequence of\n     * {@code []} characters, one set of brackets per dimension of\n     * the array.\n     *\n     * \u003cp\u003eNote that since information about the runtime representation\n     * of a type is being generated, modifiers not present on the\n     * originating source code or illegal on the originating source\n     * code may be present.\n     *\n     * @return a string describing this {@code Class}, including\n     * information about modifiers and type parameters\n     *\n     * @since 1.8\n     */\n    public String toGenericString() {\n        if (isPrimitive()) {\n            return toString();\n        } else {\n            StringBuilder sb \u003d new StringBuilder();\n            Class\u003c?\u003e component \u003d this;\n            int arrayDepth \u003d 0;\n\n            if (isArray()) {\n                do {\n                    arrayDepth++;\n                    component \u003d component.getComponentType();\n                } while (component.isArray());\n                sb.append(component.getName());\n            } else {\n                // Class modifiers are a superset of interface modifiers\n                int modifiers \u003d getModifiers() \u0026 Modifier.classModifiers();\n                if (modifiers !\u003d 0) {\n                    sb.append(Modifier.toString(modifiers));\n                    sb.append(\u0027 \u0027);\n                }\n\n                if (isAnnotation()) {\n                    sb.append(\u0027@\u0027);\n                }\n                if (isInterface()) { // Note: all annotation interfaces are interfaces\n                    sb.append(\"interface\");\n                } else {\n                    if (isEnum())\n                        sb.append(\"enum\");\n                    else if (isRecord())\n                        sb.append(\"record\");\n                    else\n                        sb.append(\"class\");\n                }\n                sb.append(\u0027 \u0027);\n                sb.append(getName());\n            }\n\n            TypeVariable\u003c?\u003e[] typeparms \u003d component.getTypeParameters();\n            if (typeparms.length \u003e 0) {\n                sb.append(Arrays.stream(typeparms)\n                          .map(Class::typeVarBounds)\n                          .collect(Collectors.joining(\",\", \"\u003c\", \"\u003e\")));\n            }\n\n            if (arrayDepth \u003e 0) sb.append(\"[]\".repeat(arrayDepth));\n\n            return sb.toString();\n        }\n    }\n\n    static String typeVarBounds(TypeVariable\u003c?\u003e typeVar) {\n        Type[] bounds \u003d typeVar.getBounds();\n        if (bounds.length \u003d\u003d 1 \u0026\u0026 bounds[0].equals(Object.class)) {\n            return typeVar.getName();\n        } else {\n            return typeVar.getName() + \" extends \" +\n                Arrays.stream(bounds)\n                .map(Type::getTypeName)\n                .collect(Collectors.joining(\" \u0026 \"));\n        }\n    }\n\n    /**\n     * Returns the {@code Class} object associated with the class or\n     * interface with the given string name.  Invoking this method is\n     * equivalent to:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Class.forName(className, true, currentLoader)}\n     * \u003c/blockquote\u003e\n     *\n     * where {@code currentLoader} denotes the defining class loader of\n     * the current class.\n     *\n     * \u003cp\u003e For example, the following code fragment returns the\n     * runtime {@code Class} descriptor for the class named\n     * {@code java.lang.Thread}:\n     *\n     * \u003cblockquote\u003e\n     *   {@code Class t \u003d Class.forName(\"java.lang.Thread\")}\n     * \u003c/blockquote\u003e\n     * \u003cp\u003e\n     * A call to {@code forName(\"X\")} causes the class named\n     * {@code X} to be initialized.\n     *\n     * @param      className   the fully qualified name of the desired class.\n     * @return     the {@code Class} object for the class with the\n     *             specified name.\n     * @throws    LinkageError if the linkage fails\n     * @throws    ExceptionInInitializerError if the initialization provoked\n     *            by this method fails\n     * @throws    ClassNotFoundException if the class cannot be located\n     *\n     * @jls 12.2 Loading of Classes and Interfaces\n     * @jls 12.3 Linking of Classes and Interfaces\n     * @jls 12.4 Initialization of Classes and Interfaces\n     */\n    @CallerSensitive\n    public static Class\u003c?\u003e forName(String className)\n                throws ClassNotFoundException {\n        Class\u003c?\u003e caller \u003d Reflection.getCallerClass();\n        return forName0(className, true, ClassLoader.getClassLoader(caller), caller);\n    }\n\n\n    /**\n     * Returns the {@code Class} object associated with the class or\n     * interface with the given string name, using the given class loader.\n     * Given the fully qualified name for a class or interface (in the same\n     * format returned by {@code getName}) this method attempts to\n     * locate and load the class or interface.  The specified class\n     * loader is used to load the class or interface.  If the parameter\n     * {@code loader} is null, the class is loaded through the bootstrap\n     * class loader.  The class is initialized only if the\n     * {@code initialize} parameter is {@code true} and if it has\n     * not been initialized earlier.\n     *\n     * \u003cp\u003e If {@code name} denotes a primitive type or void, an attempt\n     * will be made to locate a user-defined class in the unnamed package whose\n     * name is {@code name}. Therefore, this method cannot be used to\n     * obtain any of the {@code Class} objects representing primitive\n     * types or void.\n     *\n     * \u003cp\u003e If {@code name} denotes an array class, the component type of\n     * the array class is loaded but not initialized.\n     *\n     * \u003cp\u003e For example, in an instance method the expression:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Class.forName(\"Foo\")}\n     * \u003c/blockquote\u003e\n     *\n     * is equivalent to:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Class.forName(\"Foo\", true, this.getClass().getClassLoader())}\n     * \u003c/blockquote\u003e\n     *\n     * Note that this method throws errors related to loading, linking\n     * or initializing as specified in Sections {@jls 12.2}, {@jls\n     * 12.3}, and {@jls 12.4} of \u003ccite\u003eThe Java Language\n     * Specification\u003c/cite\u003e.\n     * Note that this method does not check whether the requested class\n     * is accessible to its caller.\n     *\n     * @param name       fully qualified name of the desired class\n\n     * @param initialize if {@code true} the class will be initialized\n     *                   (which implies linking). See Section {@jls\n     *                   12.4} of \u003ccite\u003eThe Java Language\n     *                   Specification\u003c/cite\u003e.\n     * @param loader     class loader from which the class must be loaded\n     * @return           class object representing the desired class\n     *\n     * @throws    LinkageError if the linkage fails\n     * @throws    ExceptionInInitializerError if the initialization provoked\n     *            by this method fails\n     * @throws    ClassNotFoundException if the class cannot be located by\n     *            the specified class loader\n     * @throws    SecurityException\n     *            if a security manager is present, and the {@code loader} is\n     *            {@code null}, and the caller\u0027s class loader is not\n     *            {@code null}, and the caller does not have the\n     *            {@link RuntimePermission}{@code (\"getClassLoader\")}\n     *\n     * @see       java.lang.Class#forName(String)\n     * @see       java.lang.ClassLoader\n     *\n     * @jls 12.2 Loading of Classes and Interfaces\n     * @jls 12.3 Linking of Classes and Interfaces\n     * @jls 12.4 Initialization of Classes and Interfaces\n     * @since     1.2\n     */\n    @CallerSensitive\n    public static Class\u003c?\u003e forName(String name, boolean initialize,\n                                   ClassLoader loader)\n        throws ClassNotFoundException\n    {\n        Class\u003c?\u003e caller \u003d null;\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            // Reflective call to get caller class is only needed if a security manager\n            // is present.  Avoid the overhead of making this call otherwise.\n            caller \u003d Reflection.getCallerClass();\n            if (loader \u003d\u003d null) {\n                ClassLoader ccl \u003d ClassLoader.getClassLoader(caller);\n                if (ccl !\u003d null) {\n                    sm.checkPermission(\n                        SecurityConstants.GET_CLASSLOADER_PERMISSION);\n                }\n            }\n        }\n        return forName0(name, initialize, loader, caller);\n    }\n\n    /** Called after security check for system loader access checks have been made. */\n    private static native Class\u003c?\u003e forName0(String name, boolean initialize,\n                                            ClassLoader loader,\n                                            Class\u003c?\u003e caller)\n        throws ClassNotFoundException;\n\n\n    /**\n     * Returns the {@code Class} with the given \u003ca href\u003d\"ClassLoader.html#binary-name\"\u003e\n     * binary name\u003c/a\u003e in the given module.\n     *\n     * \u003cp\u003e This method attempts to locate and load the class or interface.\n     * It does not link the class, and does not run the class initializer.\n     * If the class is not found, this method returns {@code null}. \u003c/p\u003e\n     *\n     * \u003cp\u003e If the class loader of the given module defines other modules and\n     * the given name is a class defined in a different module, this method\n     * returns {@code null} after the class is loaded. \u003c/p\u003e\n     *\n     * \u003cp\u003e This method does not check whether the requested class is\n     * accessible to its caller. \u003c/p\u003e\n     *\n     * @apiNote\n     * This method returns {@code null} on failure rather than\n     * throwing a {@link ClassNotFoundException}, as is done by\n     * the {@link #forName(String, boolean, ClassLoader)} method.\n     * The security check is a stack-based permission check if the caller\n     * loads a class in another module.\n     *\n     * @param  module   A module\n     * @param  name     The \u003ca href\u003d\"ClassLoader.html#binary-name\"\u003ebinary name\u003c/a\u003e\n     *                  of the class\n     * @return {@code Class} object of the given name defined in the given module;\n     *         {@code null} if not found.\n     *\n     * @throws NullPointerException if the given module or name is {@code null}\n     *\n     * @throws LinkageError if the linkage fails\n     *\n     * @throws SecurityException\n     *         \u003cul\u003e\n     *         \u003cli\u003e if the caller is not the specified module and\n     *         {@code RuntimePermission(\"getClassLoader\")} permission is denied; or\u003c/li\u003e\n     *         \u003cli\u003e access to the module content is denied. For example,\n     *         permission check will be performed when a class loader calls\n     *         {@link ModuleReader#open(String)} to read the bytes of a class file\n     *         in a module.\u003c/li\u003e\n     *         \u003c/ul\u003e\n     *\n     * @jls 12.2 Loading of Classes and Interfaces\n     * @jls 12.3 Linking of Classes and Interfaces\n     * @since 9\n     */\n    @CallerSensitive\n    public static Class\u003c?\u003e forName(Module module, String name) {\n        Objects.requireNonNull(module);\n        Objects.requireNonNull(name);\n\n        ClassLoader cl;\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            Class\u003c?\u003e caller \u003d Reflection.getCallerClass();\n            if (caller !\u003d null \u0026\u0026 caller.getModule() !\u003d module) {\n                // if caller is null, Class.forName is the last java frame on the stack.\n                // java.base has all permissions\n                sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n            }\n            PrivilegedAction\u003cClassLoader\u003e pa \u003d module::getClassLoader;\n            cl \u003d AccessController.doPrivileged(pa);\n        } else {\n            cl \u003d module.getClassLoader();\n        }\n\n        if (cl !\u003d null) {\n            return cl.loadClass(module, name);\n        } else {\n            return BootLoader.loadClass(module, name);\n        }\n    }\n\n    /**\n     * Creates a new instance of the class represented by this {@code Class}\n     * object.  The class is instantiated as if by a {@code new}\n     * expression with an empty argument list.  The class is initialized if it\n     * has not already been initialized.\n     *\n     * @deprecated This method propagates any exception thrown by the\n     * nullary constructor, including a checked exception.  Use of\n     * this method effectively bypasses the compile-time exception\n     * checking that would otherwise be performed by the compiler.\n     * The {@link\n     * java.lang.reflect.Constructor#newInstance(java.lang.Object...)\n     * Constructor.newInstance} method avoids this problem by wrapping\n     * any exception thrown by the constructor in a (checked) {@link\n     * java.lang.reflect.InvocationTargetException}.\n     *\n     * \u003cp\u003eThe call\n     *\n     * \u003cpre\u003e{@code\n     * clazz.newInstance()\n     * }\u003c/pre\u003e\n     *\n     * can be replaced by\n     *\n     * \u003cpre\u003e{@code\n     * clazz.getDeclaredConstructor().newInstance()\n     * }\u003c/pre\u003e\n     *\n     * The latter sequence of calls is inferred to be able to throw\n     * the additional exception types {@link\n     * InvocationTargetException} and {@link\n     * NoSuchMethodException}. Both of these exception types are\n     * subclasses of {@link ReflectiveOperationException}.\n     *\n     * @return  a newly allocated instance of the class represented by this\n     *          object.\n     * @throws  IllegalAccessException  if the class or its nullary\n     *          constructor is not accessible.\n     * @throws  InstantiationException\n     *          if this {@code Class} represents an abstract class,\n     *          an interface, an array class, a primitive type, or void;\n     *          or if the class has no nullary constructor;\n     *          or if the instantiation fails for some other reason.\n     * @throws  ExceptionInInitializerError if the initialization\n     *          provoked by this method fails.\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *          the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class.\n     */\n    @CallerSensitive\n    @Deprecated(since\u003d\"9\")\n    public T newInstance()\n        throws InstantiationException, IllegalAccessException\n    {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), false);\n        }\n\n        // Constructor lookup\n        Constructor\u003cT\u003e tmpConstructor \u003d cachedConstructor;\n        if (tmpConstructor \u003d\u003d null) {\n            if (this \u003d\u003d Class.class) {\n                throw new IllegalAccessException(\n                    \"Can not call newInstance() on the Class for java.lang.Class\"\n                );\n            }\n            try {\n                Class\u003c?\u003e[] empty \u003d {};\n                final Constructor\u003cT\u003e c \u003d getReflectionFactory().copyConstructor(\n                    getConstructor0(empty, Member.DECLARED));\n                // Disable accessibility checks on the constructor\n                // access check is done with the true caller\n                java.security.AccessController.doPrivileged(\n                    new java.security.PrivilegedAction\u003c\u003e() {\n                        public Void run() {\n                                c.setAccessible(true);\n                                return null;\n                            }\n                        });\n                cachedConstructor \u003d tmpConstructor \u003d c;\n            } catch (NoSuchMethodException e) {\n                throw (InstantiationException)\n                    new InstantiationException(getName()).initCause(e);\n            }\n        }\n\n        try {\n            Class\u003c?\u003e caller \u003d Reflection.getCallerClass();\n            return getReflectionFactory().newInstance(tmpConstructor, null, caller);\n        } catch (InvocationTargetException e) {\n            Unsafe.getUnsafe().throwException(e.getTargetException());\n            // Not reached\n            return null;\n        }\n    }\n\n    private transient volatile Constructor\u003cT\u003e cachedConstructor;\n\n    /**\n     * Determines if the specified {@code Object} is assignment-compatible\n     * with the object represented by this {@code Class}.  This method is\n     * the dynamic equivalent of the Java language {@code instanceof}\n     * operator. The method returns {@code true} if the specified\n     * {@code Object} argument is non-null and can be cast to the\n     * reference type represented by this {@code Class} object without\n     * raising a {@code ClassCastException.} It returns {@code false}\n     * otherwise.\n     *\n     * \u003cp\u003e Specifically, if this {@code Class} object represents a\n     * declared class, this method returns {@code true} if the specified\n     * {@code Object} argument is an instance of the represented class (or\n     * of any of its subclasses); it returns {@code false} otherwise. If\n     * this {@code Class} object represents an array class, this method\n     * returns {@code true} if the specified {@code Object} argument\n     * can be converted to an object of the array class by an identity\n     * conversion or by a widening reference conversion; it returns\n     * {@code false} otherwise. If this {@code Class} object\n     * represents an interface, this method returns {@code true} if the\n     * class or any superclass of the specified {@code Object} argument\n     * implements this interface; it returns {@code false} otherwise. If\n     * this {@code Class} object represents a primitive type, this method\n     * returns {@code false}.\n     *\n     * @param   obj the object to check\n     * @return  true if {@code obj} is an instance of this class\n     *\n     * @since 1.1\n     */\n    @IntrinsicCandidate\n    public native boolean isInstance(Object obj);\n\n\n    /**\n     * Determines if the class or interface represented by this\n     * {@code Class} object is either the same as, or is a superclass or\n     * superinterface of, the class or interface represented by the specified\n     * {@code Class} parameter. It returns {@code true} if so;\n     * otherwise it returns {@code false}. If this {@code Class}\n     * object represents a primitive type, this method returns\n     * {@code true} if the specified {@code Class} parameter is\n     * exactly this {@code Class} object; otherwise it returns\n     * {@code false}.\n     *\n     * \u003cp\u003e Specifically, this method tests whether the type represented by the\n     * specified {@code Class} parameter can be converted to the type\n     * represented by this {@code Class} object via an identity conversion\n     * or via a widening reference conversion. See \u003ccite\u003eThe Java Language\n     * Specification\u003c/cite\u003e, sections {@jls 5.1.1} and {@jls 5.1.4},\n     * for details.\n     *\n     * @param     cls the {@code Class} object to be checked\n     * @return    the {@code boolean} value indicating whether objects of the\n     *            type {@code cls} can be assigned to objects of this class\n     * @throws    NullPointerException if the specified Class parameter is\n     *            null.\n     * @since     1.1\n     */\n    @IntrinsicCandidate\n    public native boolean isAssignableFrom(Class\u003c?\u003e cls);\n\n\n    /**\n     * Determines if this {@code Class} object represents an\n     * interface type.\n     *\n     * @return  {@code true} if this {@code Class} object represents an interface;\n     *          {@code false} otherwise.\n     */\n    @IntrinsicCandidate\n    public native boolean isInterface();\n\n\n    /**\n     * Determines if this {@code Class} object represents an array class.\n     *\n     * @return  {@code true} if this {@code Class} object represents an array class;\n     *          {@code false} otherwise.\n     * @since   1.1\n     */\n    @IntrinsicCandidate\n    public native boolean isArray();\n\n\n    /**\n     * Determines if the specified {@code Class} object represents a\n     * primitive type.\n     *\n     * \u003cp\u003e There are nine predefined {@code Class} objects to represent\n     * the eight primitive types and void.  These are created by the Java\n     * Virtual Machine, and have the same names as the primitive types that\n     * they represent, namely {@code boolean}, {@code byte},\n     * {@code char}, {@code short}, {@code int},\n     * {@code long}, {@code float}, and {@code double}.\n     *\n     * \u003cp\u003e These objects may only be accessed via the following public static\n     * final variables, and are the only {@code Class} objects for which\n     * this method returns {@code true}.\n     *\n     * @return true if and only if this class represents a primitive type\n     *\n     * @see     java.lang.Boolean#TYPE\n     * @see     java.lang.Character#TYPE\n     * @see     java.lang.Byte#TYPE\n     * @see     java.lang.Short#TYPE\n     * @see     java.lang.Integer#TYPE\n     * @see     java.lang.Long#TYPE\n     * @see     java.lang.Float#TYPE\n     * @see     java.lang.Double#TYPE\n     * @see     java.lang.Void#TYPE\n     * @since 1.1\n     */\n    @IntrinsicCandidate\n    public native boolean isPrimitive();\n\n    /**\n     * Returns true if this {@code Class} object represents an annotation\n     * interface.  Note that if this method returns true, {@link #isInterface()}\n     * would also return true, as all annotation interfaces are also interfaces.\n     *\n     * @return {@code true} if this {@code Class} object represents an annotation\n     *      interface; {@code false} otherwise\n     * @since 1.5\n     */\n    public boolean isAnnotation() {\n        return (getModifiers() \u0026 ANNOTATION) !\u003d 0;\n    }\n\n    /**\n     * Returns {@code true} if and only if this class has the synthetic modifier\n     * bit set.\n     *\n     * @return {@code true} if and only if this class has the synthetic modifier bit set\n     * @jls 13.1 The Form of a Binary\n     * @jvms 4.1 The {@code ClassFile} Structure\n     * @since 1.5\n     */\n    public boolean isSynthetic() {\n        return (getModifiers() \u0026 SYNTHETIC) !\u003d 0;\n    }\n\n    /**\n     * Returns the  name of the entity (class, interface, array class,\n     * primitive type, or void) represented by this {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface,\n     * not an array class, then:\n     * \u003cul\u003e\n     * \u003cli\u003e If the class or interface is not {@linkplain #isHidden() hidden},\n     *      then the \u003ca href\u003d\"ClassLoader.html#binary-name\"\u003ebinary name\u003c/a\u003e\n     *      of the class or interface is returned.\n     * \u003cli\u003e If the class or interface is hidden, then the result is a string\n     *      of the form: {@code N + \u0027/\u0027 + \u003csuffix\u003e}\n     *      where {@code N} is the \u003ca href\u003d\"ClassLoader.html#binary-name\"\u003ebinary name\u003c/a\u003e\n     *      indicated by the {@code class} file passed to\n     *      {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)\n     *      Lookup::defineHiddenClass}, and {@code \u003csuffix\u003e} is an unqualified name.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array class, then\n     * the result is a string consisting of one or more \u0027{@code [}\u0027 characters\n     * representing the depth of the array nesting, followed by the element\n     * type as encoded using the following table:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"striped\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eElement types and encodings\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"col\"\u003e Element Type \u003cth scope\u003d\"col\"\u003e Encoding\n     * \u003c/thead\u003e\n     * \u003ctbody style\u003d\"text-align:left\"\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e {@code boolean} \u003ctd style\u003d\"text-align:center\"\u003e {@code Z}\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e {@code byte}    \u003ctd style\u003d\"text-align:center\"\u003e {@code B}\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e {@code char}    \u003ctd style\u003d\"text-align:center\"\u003e {@code C}\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e class or interface with \u003ca href\u003d\"ClassLoader.html#binary-name\"\u003ebinary name\u003c/a\u003e \u003ci\u003eN\u003c/i\u003e\n     *                                      \u003ctd style\u003d\"text-align:center\"\u003e {@code L}\u003cem\u003eN\u003c/em\u003e{@code ;}\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e {@code double}  \u003ctd style\u003d\"text-align:center\"\u003e {@code D}\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e {@code float}   \u003ctd style\u003d\"text-align:center\"\u003e {@code F}\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e {@code int}     \u003ctd style\u003d\"text-align:center\"\u003e {@code I}\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e {@code long}    \u003ctd style\u003d\"text-align:center\"\u003e {@code J}\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e {@code short}   \u003ctd style\u003d\"text-align:center\"\u003e {@code S}\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e If this {@code Class} object represents a primitive type or {@code void},\n     * then the result is a string with the same spelling as the Java language\n     * keyword which corresponds to the primitive type or {@code void}.\n     *\n     * \u003cp\u003e Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * String.class.getName()\n     *     returns \"java.lang.String\"\n     * byte.class.getName()\n     *     returns \"byte\"\n     * (new Object[3]).getClass().getName()\n     *     returns \"[Ljava.lang.Object;\"\n     * (new int[3][4][5][6][7][8][9]).getClass().getName()\n     *     returns \"[[[[[[[I\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  the name of the class, interface, or other entity\n     *          represented by this {@code Class} object.\n     * @jls 13.1 The Form of a Binary\n     */\n    public String getName() {\n        String name \u003d this.name;\n        return name !\u003d null ? name : initClassName();\n    }\n\n    // Cache the name to reduce the number of calls into the VM.\n    // This field would be set by VM itself during initClassName call.\n    private transient String name;\n    private native String initClassName();\n\n    /**\n     * Returns the class loader for the class.  Some implementations may use\n     * null to represent the bootstrap class loader. This method will return\n     * null in such implementations if this class was loaded by the bootstrap\n     * class loader.\n     *\n     * \u003cp\u003eIf this {@code Class} object\n     * represents a primitive type or void, null is returned.\n     *\n     * @return  the class loader that loaded the class or interface\n     *          represented by this {@code Class} object.\n     * @throws  SecurityException\n     *          if a security manager is present, and the caller\u0027s class loader\n     *          is not {@code null} and is not the same as or an ancestor of the\n     *          class loader for the class whose class loader is requested,\n     *          and the caller does not have the\n     *          {@link RuntimePermission}{@code (\"getClassLoader\")}\n     * @see java.lang.ClassLoader\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     */\n    @CallerSensitive\n    @ForceInline // to ensure Reflection.getCallerClass optimization\n    public ClassLoader getClassLoader() {\n        ClassLoader cl \u003d getClassLoader0();\n        if (cl \u003d\u003d null)\n            return null;\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            ClassLoader.checkClassLoaderPermission(cl, Reflection.getCallerClass());\n        }\n        return cl;\n    }\n\n    // Package-private to allow ClassLoader access\n    ClassLoader getClassLoader0() { return classLoader; }\n\n    /**\n     * Returns the module that this class or interface is a member of.\n     *\n     * If this class represents an array type then this method returns the\n     * {@code Module} for the element type. If this class represents a\n     * primitive type or void, then the {@code Module} object for the\n     * {@code java.base} module is returned.\n     *\n     * If this class is in an unnamed module then the {@linkplain\n     * ClassLoader#getUnnamedModule() unnamed} {@code Module} of the class\n     * loader for this class is returned.\n     *\n     * @return the module that this class or interface is a member of\n     *\n     * @since 9\n     */\n    public Module getModule() {\n        return module;\n    }\n\n    // set by VM\n    private transient Module module;\n\n    // Initialized in JVM not by private constructor\n    // This field is filtered from reflection access, i.e. getDeclaredField\n    // will throw NoSuchFieldException\n    private final ClassLoader classLoader;\n\n    // Set by VM\n    private transient Object classData;\n\n    // package-private\n    Object getClassData() {\n        return classData;\n    }\n\n    /**\n     * Returns an array of {@code TypeVariable} objects that represent the\n     * type variables declared by the generic declaration represented by this\n     * {@code GenericDeclaration} object, in declaration order.  Returns an\n     * array of length 0 if the underlying generic declaration declares no type\n     * variables.\n     *\n     * @return an array of {@code TypeVariable} objects that represent\n     *     the type variables declared by this generic declaration\n     * @throws java.lang.reflect.GenericSignatureFormatError if the generic\n     *     signature of this generic declaration does not conform to\n     *     the format specified in section {@jvms 4.7.9} of\n     *     \u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    public TypeVariable\u003cClass\u003cT\u003e\u003e[] getTypeParameters() {\n        ClassRepository info \u003d getGenericInfo();\n        if (info !\u003d null)\n            return (TypeVariable\u003cClass\u003cT\u003e\u003e[])info.getTypeParameters();\n        else\n            return (TypeVariable\u003cClass\u003cT\u003e\u003e[])new TypeVariable\u003c?\u003e[0];\n    }\n\n\n    /**\n     * Returns the {@code Class} representing the direct superclass of the\n     * entity (class, interface, primitive type or void) represented by\n     * this {@code Class}.  If this {@code Class} represents either the\n     * {@code Object} class, an interface, a primitive type, or void, then\n     * null is returned.  If this {@code Class} object represents an array class\n     * then the {@code Class} object representing the {@code Object} class is\n     * returned.\n     *\n     * @return the direct superclass of the class represented by this {@code Class} object\n     */\n    @IntrinsicCandidate\n    public native Class\u003c? super T\u003e getSuperclass();\n\n\n    /**\n     * Returns the {@code Type} representing the direct superclass of\n     * the entity (class, interface, primitive type or void) represented by\n     * this {@code Class} object.\n     *\n     * \u003cp\u003eIf the superclass is a parameterized type, the {@code Type}\n     * object returned must accurately reflect the actual type\n     * arguments used in the source code. The parameterized type\n     * representing the superclass is created if it had not been\n     * created before. See the declaration of {@link\n     * java.lang.reflect.ParameterizedType ParameterizedType} for the\n     * semantics of the creation process for parameterized types.  If\n     * this {@code Class} object represents either the {@code Object}\n     * class, an interface, a primitive type, or void, then null is\n     * returned.  If this {@code Class} object represents an array class\n     * then the {@code Class} object representing the {@code Object} class is\n     * returned.\n     *\n     * @throws java.lang.reflect.GenericSignatureFormatError if the generic\n     *     class signature does not conform to the format specified in\n     *     section {@jvms 4.7.9} of \u003ccite\u003eThe Java Virtual\n     *     Machine Specification\u003c/cite\u003e\n     * @throws TypeNotPresentException if the generic superclass\n     *     refers to a non-existent type declaration\n     * @throws java.lang.reflect.MalformedParameterizedTypeException if the\n     *     generic superclass refers to a parameterized type that cannot be\n     *     instantiated  for any reason\n     * @return the direct superclass of the class represented by this {@code Class} object\n     * @since 1.5\n     */\n    public Type getGenericSuperclass() {\n        ClassRepository info \u003d getGenericInfo();\n        if (info \u003d\u003d null) {\n            return getSuperclass();\n        }\n\n        // Historical irregularity:\n        // Generic signature marks interfaces with superclass \u003d Object\n        // but this API returns null for interfaces\n        if (isInterface()) {\n            return null;\n        }\n\n        return info.getSuperclass();\n    }\n\n    /**\n     * Gets the package of this class.\n     *\n     * \u003cp\u003eIf this class represents an array type, a primitive type or void,\n     * this method returns {@code null}.\n     *\n     * @return the package of this class.\n     * @revised 9\n     */\n    public Package getPackage() {\n        if (isPrimitive() || isArray()) {\n            return null;\n        }\n        ClassLoader cl \u003d getClassLoader0();\n        return cl !\u003d null ? cl.definePackage(this)\n                          : BootLoader.definePackage(this);\n    }\n\n    /**\n     * Returns the fully qualified package name.\n     *\n     * \u003cp\u003e If this class is a top level class, then this method returns the fully\n     * qualified name of the package that the class is a member of, or the\n     * empty string if the class is in an unnamed package.\n     *\n     * \u003cp\u003e If this class is a member class, then this method is equivalent to\n     * invoking {@code getPackageName()} on the {@linkplain #getEnclosingClass\n     * enclosing class}.\n     *\n     * \u003cp\u003e If this class is a {@linkplain #isLocalClass local class} or an {@linkplain\n     * #isAnonymousClass() anonymous class}, then this method is equivalent to\n     * invoking {@code getPackageName()} on the {@linkplain #getDeclaringClass\n     * declaring class} of the {@linkplain #getEnclosingMethod enclosing method} or\n     * {@linkplain #getEnclosingConstructor enclosing constructor}.\n     *\n     * \u003cp\u003e If this class represents an array type then this method returns the\n     * package name of the element type. If this class represents a primitive\n     * type or void then the package name \"{@code java.lang}\" is returned.\n     *\n     * @return the fully qualified package name\n     *\n     * @since 9\n     * @jls 6.7 Fully Qualified Names\n     */\n    public String getPackageName() {\n        String pn \u003d this.packageName;\n        if (pn \u003d\u003d null) {\n            Class\u003c?\u003e c \u003d isArray() ? elementType() : this;\n            if (c.isPrimitive()) {\n                pn \u003d \"java.lang\";\n            } else {\n                String cn \u003d c.getName();\n                int dot \u003d cn.lastIndexOf(\u0027.\u0027);\n                pn \u003d (dot !\u003d -1) ? cn.substring(0, dot).intern() : \"\";\n            }\n            this.packageName \u003d pn;\n        }\n        return pn;\n    }\n\n    // cached package name\n    private transient String packageName;\n\n    /**\n     * Returns the interfaces directly implemented by the class or interface\n     * represented by this {@code Class} object.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents a class, the return value is an array\n     * containing objects representing all interfaces directly implemented by\n     * the class.  The order of the interface objects in the array corresponds\n     * to the order of the interface names in the {@code implements} clause of\n     * the declaration of the class represented by this {@code Class} object.  For example,\n     * given the declaration:\n     * \u003cblockquote\u003e\n     * {@code class Shimmer implements FloorWax, DessertTopping { ... }}\n     * \u003c/blockquote\u003e\n     * suppose the value of {@code s} is an instance of\n     * {@code Shimmer}; the value of the expression:\n     * \u003cblockquote\u003e\n     * {@code s.getClass().getInterfaces()[0]}\n     * \u003c/blockquote\u003e\n     * is the {@code Class} object that represents interface\n     * {@code FloorWax}; and the value of:\n     * \u003cblockquote\u003e\n     * {@code s.getClass().getInterfaces()[1]}\n     * \u003c/blockquote\u003e\n     * is the {@code Class} object that represents interface\n     * {@code DessertTopping}.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents an interface, the array contains objects\n     * representing all interfaces directly extended by the interface.  The\n     * order of the interface objects in the array corresponds to the order of\n     * the interface names in the {@code extends} clause of the declaration of\n     * the interface represented by this {@code Class} object.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents a class or interface that implements no\n     * interfaces, the method returns an array of length 0.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents a primitive type or void, the method\n     * returns an array of length 0.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents an array type, the\n     * interfaces {@code Cloneable} and {@code java.io.Serializable} are\n     * returned in that order.\n     *\n     * @return an array of interfaces directly implemented by this class\n     */\n    public Class\u003c?\u003e[] getInterfaces() {\n        // defensively copy before handing over to user code\n        return getInterfaces(true);\n    }\n\n    private Class\u003c?\u003e[] getInterfaces(boolean cloneArray) {\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd \u003d\u003d null) {\n            // no cloning required\n            return getInterfaces0();\n        } else {\n            Class\u003c?\u003e[] interfaces \u003d rd.interfaces;\n            if (interfaces \u003d\u003d null) {\n                interfaces \u003d getInterfaces0();\n                rd.interfaces \u003d interfaces;\n            }\n            // defensively copy if requested\n            return cloneArray ? interfaces.clone() : interfaces;\n        }\n    }\n\n    private native Class\u003c?\u003e[] getInterfaces0();\n\n    /**\n     * Returns the {@code Type}s representing the interfaces\n     * directly implemented by the class or interface represented by\n     * this {@code Class} object.\n     *\n     * \u003cp\u003eIf a superinterface is a parameterized type, the\n     * {@code Type} object returned for it must accurately reflect\n     * the actual type arguments used in the source code. The\n     * parameterized type representing each superinterface is created\n     * if it had not been created before. See the declaration of\n     * {@link java.lang.reflect.ParameterizedType ParameterizedType}\n     * for the semantics of the creation process for parameterized\n     * types.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents a class, the return value is an array\n     * containing objects representing all interfaces directly implemented by\n     * the class.  The order of the interface objects in the array corresponds\n     * to the order of the interface names in the {@code implements} clause of\n     * the declaration of the class represented by this {@code Class} object.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents an interface, the array contains objects\n     * representing all interfaces directly extended by the interface.  The\n     * order of the interface objects in the array corresponds to the order of\n     * the interface names in the {@code extends} clause of the declaration of\n     * the interface represented by this {@code Class} object.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents a class or interface that implements no\n     * interfaces, the method returns an array of length 0.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents a primitive type or void, the method\n     * returns an array of length 0.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents an array type, the\n     * interfaces {@code Cloneable} and {@code java.io.Serializable} are\n     * returned in that order.\n     *\n     * @throws java.lang.reflect.GenericSignatureFormatError\n     *     if the generic class signature does not conform to the\n     *     format specified in section {@jvms 4.7.9} of \u003ccite\u003eThe\n     *     Java Virtual Machine Specification\u003c/cite\u003e\n     * @throws TypeNotPresentException if any of the generic\n     *     superinterfaces refers to a non-existent type declaration\n     * @throws java.lang.reflect.MalformedParameterizedTypeException\n     *     if any of the generic superinterfaces refer to a parameterized\n     *     type that cannot be instantiated for any reason\n     * @return an array of interfaces directly implemented by this class\n     * @since 1.5\n     */\n    public Type[] getGenericInterfaces() {\n        ClassRepository info \u003d getGenericInfo();\n        return (info \u003d\u003d null) ?  getInterfaces() : info.getSuperInterfaces();\n    }\n\n\n    /**\n     * Returns the {@code Class} representing the component type of an\n     * array.  If this class does not represent an array class this method\n     * returns null.\n     *\n     * @return the {@code Class} representing the component type of this\n     * class if this class is an array\n     * @see     java.lang.reflect.Array\n     * @since 1.1\n     */\n    public Class\u003c?\u003e getComponentType() {\n        // Only return for array types. Storage may be reused for Class for instance types.\n        if (isArray()) {\n            return componentType;\n        } else {\n            return null;\n        }\n    }\n\n    private final Class\u003c?\u003e componentType;\n\n    /*\n     * Returns the {@code Class} representing the element type of an array class.\n     * If this class does not represent an array class, then this method returns\n     * {@code null}.\n     */\n    private Class\u003c?\u003e elementType() {\n        if (!isArray()) return null;\n\n        Class\u003c?\u003e c \u003d this;\n        while (c.isArray()) {\n            c \u003d c.getComponentType();\n        }\n        return c;\n    }\n\n    /**\n     * Returns the Java language modifiers for this class or interface, encoded\n     * in an integer. The modifiers consist of the Java Virtual Machine\u0027s\n     * constants for {@code public}, {@code protected},\n     * {@code private}, {@code final}, {@code static},\n     * {@code abstract} and {@code interface}; they should be decoded\n     * using the methods of class {@code Modifier}.\n     *\n     * \u003cp\u003e If the underlying class is an array class, then its\n     * {@code public}, {@code private} and {@code protected}\n     * modifiers are the same as those of its component type.  If this\n     * {@code Class} object represents a primitive type or void, its\n     * {@code public} modifier is always {@code true}, and its\n     * {@code protected} and {@code private} modifiers are always\n     * {@code false}. If this {@code Class} object represents an array class, a\n     * primitive type or void, then its {@code final} modifier is always\n     * {@code true} and its interface modifier is always\n     * {@code false}. The values of its other modifiers are not determined\n     * by this specification.\n     *\n     * \u003cp\u003e The modifier encodings are defined in section {@jvms 4.1}\n     * of \u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e.\n     *\n     * @return the {@code int} representing the modifiers for this class\n     * @see     java.lang.reflect.Modifier\n     * @since 1.1\n     */\n    @IntrinsicCandidate\n    public native int getModifiers();\n\n\n    /**\n     * Gets the signers of this class.\n     *\n     * @return  the signers of this class, or null if there are no signers.  In\n     *          particular, this method returns null if this {@code Class} object represents\n     *          a primitive type or void.\n     * @since   1.1\n     */\n    public native Object[] getSigners();\n\n\n    /**\n     * Set the signers of this class.\n     */\n    native void setSigners(Object[] signers);\n\n\n    /**\n     * If this {@code Class} object represents a local or anonymous\n     * class within a method, returns a {@link\n     * java.lang.reflect.Method Method} object representing the\n     * immediately enclosing method of the underlying class. Returns\n     * {@code null} otherwise.\n     *\n     * In particular, this method returns {@code null} if the underlying\n     * class is a local or anonymous class immediately enclosed by a class or\n     * interface declaration, instance initializer or static initializer.\n     *\n     * @return the immediately enclosing method of the underlying class, if\n     *     that class is a local or anonymous class; otherwise {@code null}.\n     *\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *         following conditions is met:\n     *\n     *         \u003cul\u003e\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *         class loader of the enclosing class and invocation of\n     *         {@link SecurityManager#checkPermission\n     *         s.checkPermission} method with\n     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *         denies access to the methods within the enclosing class\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the enclosing class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of the enclosing class\n     *\n     *         \u003c/ul\u003e\n     * @since 1.5\n     */\n    @CallerSensitive\n    public Method getEnclosingMethod() throws SecurityException {\n        EnclosingMethodInfo enclosingInfo \u003d getEnclosingMethodInfo();\n\n        if (enclosingInfo \u003d\u003d null)\n            return null;\n        else {\n            if (!enclosingInfo.isMethod())\n                return null;\n\n            MethodRepository typeInfo \u003d MethodRepository.make(enclosingInfo.getDescriptor(),\n                                                              getFactory());\n            Class\u003c?\u003e   returnType       \u003d toClass(typeInfo.getReturnType());\n            Type []    parameterTypes   \u003d typeInfo.getParameterTypes();\n            Class\u003c?\u003e[] parameterClasses \u003d new Class\u003c?\u003e[parameterTypes.length];\n\n            // Convert Types to Classes; returned types *should*\n            // be class objects since the methodDescriptor\u0027s used\n            // don\u0027t have generics information\n            for(int i \u003d 0; i \u003c parameterClasses.length; i++)\n                parameterClasses[i] \u003d toClass(parameterTypes[i]);\n\n            // Perform access check\n            final Class\u003c?\u003e enclosingCandidate \u003d enclosingInfo.getEnclosingClass();\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                enclosingCandidate.checkMemberAccess(sm, Member.DECLARED,\n                                                     Reflection.getCallerClass(), true);\n            }\n            Method[] candidates \u003d enclosingCandidate.privateGetDeclaredMethods(false);\n\n            /*\n             * Loop over all declared methods; match method name,\n             * number of and type of parameters, *and* return\n             * type.  Matching return type is also necessary\n             * because of covariant returns, etc.\n             */\n            ReflectionFactory fact \u003d getReflectionFactory();\n            for (Method m : candidates) {\n                if (m.getName().equals(enclosingInfo.getName()) \u0026\u0026\n                    arrayContentsEq(parameterClasses,\n                                    fact.getExecutableSharedParameterTypes(m))) {\n                    // finally, check return type\n                    if (m.getReturnType().equals(returnType)) {\n                        return fact.copyMethod(m);\n                    }\n                }\n            }\n\n            throw new InternalError(\"Enclosing method not found\");\n        }\n    }\n\n    private native Object[] getEnclosingMethod0();\n\n    private EnclosingMethodInfo getEnclosingMethodInfo() {\n        Object[] enclosingInfo \u003d getEnclosingMethod0();\n        if (enclosingInfo \u003d\u003d null)\n            return null;\n        else {\n            return new EnclosingMethodInfo(enclosingInfo);\n        }\n    }\n\n    private static final class EnclosingMethodInfo {\n        private final Class\u003c?\u003e enclosingClass;\n        private final String name;\n        private final String descriptor;\n\n        static void validate(Object[] enclosingInfo) {\n            if (enclosingInfo.length !\u003d 3)\n                throw new InternalError(\"Malformed enclosing method information\");\n            try {\n                // The array is expected to have three elements:\n\n                // the immediately enclosing class\n                Class\u003c?\u003e enclosingClass \u003d (Class\u003c?\u003e)enclosingInfo[0];\n                assert(enclosingClass !\u003d null);\n\n                // the immediately enclosing method or constructor\u0027s\n                // name (can be null).\n                String name \u003d (String)enclosingInfo[1];\n\n                // the immediately enclosing method or constructor\u0027s\n                // descriptor (null iff name is).\n                String descriptor \u003d (String)enclosingInfo[2];\n                assert((name !\u003d null \u0026\u0026 descriptor !\u003d null) || name \u003d\u003d descriptor);\n            } catch (ClassCastException cce) {\n                throw new InternalError(\"Invalid type in enclosing method information\", cce);\n            }\n        }\n\n        EnclosingMethodInfo(Object[] enclosingInfo) {\n            validate(enclosingInfo);\n            this.enclosingClass \u003d (Class\u003c?\u003e)enclosingInfo[0];\n            this.name \u003d (String)enclosingInfo[1];\n            this.descriptor \u003d (String)enclosingInfo[2];\n        }\n\n        boolean isPartial() {\n            return enclosingClass \u003d\u003d null || name \u003d\u003d null || descriptor \u003d\u003d null;\n        }\n\n        boolean isConstructor() { return !isPartial() \u0026\u0026 \"\u003cinit\u003e\".equals(name); }\n\n        boolean isMethod() { return !isPartial() \u0026\u0026 !isConstructor() \u0026\u0026 !\"\u003cclinit\u003e\".equals(name); }\n\n        Class\u003c?\u003e getEnclosingClass() { return enclosingClass; }\n\n        String getName() { return name; }\n\n        String getDescriptor() { return descriptor; }\n\n    }\n\n    private static Class\u003c?\u003e toClass(Type o) {\n        if (o instanceof GenericArrayType)\n            return Array.newInstance(toClass(((GenericArrayType)o).getGenericComponentType()),\n                                     0)\n                .getClass();\n        return (Class\u003c?\u003e)o;\n     }\n\n    /**\n     * If this {@code Class} object represents a local or anonymous\n     * class within a constructor, returns a {@link\n     * java.lang.reflect.Constructor Constructor} object representing\n     * the immediately enclosing constructor of the underlying\n     * class. Returns {@code null} otherwise.  In particular, this\n     * method returns {@code null} if the underlying class is a local\n     * or anonymous class immediately enclosed by a class or\n     * interface declaration, instance initializer or static initializer.\n     *\n     * @return the immediately enclosing constructor of the underlying class, if\n     *     that class is a local or anonymous class; otherwise {@code null}.\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *         following conditions is met:\n     *\n     *         \u003cul\u003e\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *         class loader of the enclosing class and invocation of\n     *         {@link SecurityManager#checkPermission\n     *         s.checkPermission} method with\n     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *         denies access to the constructors within the enclosing class\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the enclosing class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of the enclosing class\n     *\n     *         \u003c/ul\u003e\n     * @since 1.5\n     */\n    @CallerSensitive\n    public Constructor\u003c?\u003e getEnclosingConstructor() throws SecurityException {\n        EnclosingMethodInfo enclosingInfo \u003d getEnclosingMethodInfo();\n\n        if (enclosingInfo \u003d\u003d null)\n            return null;\n        else {\n            if (!enclosingInfo.isConstructor())\n                return null;\n\n            ConstructorRepository typeInfo \u003d ConstructorRepository.make(enclosingInfo.getDescriptor(),\n                                                                        getFactory());\n            Type []    parameterTypes   \u003d typeInfo.getParameterTypes();\n            Class\u003c?\u003e[] parameterClasses \u003d new Class\u003c?\u003e[parameterTypes.length];\n\n            // Convert Types to Classes; returned types *should*\n            // be class objects since the methodDescriptor\u0027s used\n            // don\u0027t have generics information\n            for(int i \u003d 0; i \u003c parameterClasses.length; i++)\n                parameterClasses[i] \u003d toClass(parameterTypes[i]);\n\n            // Perform access check\n            final Class\u003c?\u003e enclosingCandidate \u003d enclosingInfo.getEnclosingClass();\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                enclosingCandidate.checkMemberAccess(sm, Member.DECLARED,\n                                                     Reflection.getCallerClass(), true);\n            }\n\n            Constructor\u003c?\u003e[] candidates \u003d enclosingCandidate\n                    .privateGetDeclaredConstructors(false);\n            /*\n             * Loop over all declared constructors; match number\n             * of and type of parameters.\n             */\n            ReflectionFactory fact \u003d getReflectionFactory();\n            for (Constructor\u003c?\u003e c : candidates) {\n                if (arrayContentsEq(parameterClasses,\n                                    fact.getExecutableSharedParameterTypes(c))) {\n                    return fact.copyConstructor(c);\n                }\n            }\n\n            throw new InternalError(\"Enclosing constructor not found\");\n        }\n    }\n\n\n    /**\n     * If the class or interface represented by this {@code Class} object\n     * is a member of another class, returns the {@code Class} object\n     * representing the class in which it was declared.  This method returns\n     * null if this class or interface is not a member of any other class.  If\n     * this {@code Class} object represents an array class, a primitive\n     * type, or void,then this method returns null.\n     *\n     * @return the declaring class for this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *         class loader is not the same as or an ancestor of the class\n     *         loader for the declaring class and invocation of {@link\n     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *         denies access to the package of the declaring class\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e getDeclaringClass() throws SecurityException {\n        final Class\u003c?\u003e candidate \u003d getDeclaringClass0();\n\n        if (candidate !\u003d null) {\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                candidate.checkPackageAccess(sm,\n                    ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n            }\n        }\n        return candidate;\n    }\n\n    private native Class\u003c?\u003e getDeclaringClass0();\n\n\n    /**\n     * Returns the immediately enclosing class of the underlying\n     * class.  If the underlying class is a top level class this\n     * method returns {@code null}.\n     * @return the immediately enclosing class of the underlying class\n     * @throws     SecurityException\n     *             If a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *             class loader is not the same as or an ancestor of the class\n     *             loader for the enclosing class and invocation of {@link\n     *             SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *             denies access to the package of the enclosing class\n     * @since 1.5\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e getEnclosingClass() throws SecurityException {\n        // There are five kinds of classes (or interfaces):\n        // a) Top level classes\n        // b) Nested classes (static member classes)\n        // c) Inner classes (non-static member classes)\n        // d) Local classes (named classes declared within a method)\n        // e) Anonymous classes\n\n\n        // JVM Spec 4.7.7: A class must have an EnclosingMethod\n        // attribute if and only if it is a local class or an\n        // anonymous class.\n        EnclosingMethodInfo enclosingInfo \u003d getEnclosingMethodInfo();\n        Class\u003c?\u003e enclosingCandidate;\n\n        if (enclosingInfo \u003d\u003d null) {\n            // This is a top level or a nested class or an inner class (a, b, or c)\n            enclosingCandidate \u003d getDeclaringClass0();\n        } else {\n            Class\u003c?\u003e enclosingClass \u003d enclosingInfo.getEnclosingClass();\n            // This is a local class or an anonymous class (d or e)\n            if (enclosingClass \u003d\u003d this || enclosingClass \u003d\u003d null)\n                throw new InternalError(\"Malformed enclosing method information\");\n            else\n                enclosingCandidate \u003d enclosingClass;\n        }\n\n        if (enclosingCandidate !\u003d null) {\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                enclosingCandidate.checkPackageAccess(sm,\n                    ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n            }\n        }\n        return enclosingCandidate;\n    }\n\n    /**\n     * Returns the simple name of the underlying class as given in the\n     * source code. Returns an empty string if the underlying class is\n     * anonymous.\n     *\n     * \u003cp\u003eThe simple name of an array is the simple name of the\n     * component type with \"[]\" appended.  In particular the simple\n     * name of an array whose component type is anonymous is \"[]\".\n     *\n     * @return the simple name of the underlying class\n     * @since 1.5\n     */\n    public String getSimpleName() {\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        String simpleName \u003d rd.simpleName;\n        if (simpleName \u003d\u003d null) {\n            rd.simpleName \u003d simpleName \u003d getSimpleName0();\n        }\n        return simpleName;\n    }\n\n    private String getSimpleName0() {\n        if (isArray()) {\n            return getComponentType().getSimpleName() + \"[]\";\n        }\n        String simpleName \u003d getSimpleBinaryName();\n        if (simpleName \u003d\u003d null) { // top level class\n            simpleName \u003d getName();\n            simpleName \u003d simpleName.substring(simpleName.lastIndexOf(\u0027.\u0027) + 1); // strip the package name\n        }\n        return simpleName;\n    }\n\n    /**\n     * Return an informative string for the name of this class or interface.\n     *\n     * @return an informative string for the name of this class or interface\n     * @since 1.8\n     */\n    public String getTypeName() {\n        if (isArray()) {\n            try {\n                Class\u003c?\u003e cl \u003d this;\n                int dimensions \u003d 0;\n                do {\n                    dimensions++;\n                    cl \u003d cl.getComponentType();\n                } while (cl.isArray());\n                return cl.getName() + \"[]\".repeat(dimensions);\n            } catch (Throwable e) { /*FALLTHRU*/ }\n        }\n        return getName();\n    }\n\n    /**\n     * Returns the canonical name of the underlying class as\n     * defined by \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e.\n     * Returns {@code null} if the underlying class does not have a canonical\n     * name. Classes without canonical names include:\n     * \u003cul\u003e\n     * \u003cli\u003ea {@linkplain #isLocalClass() local class}\n     * \u003cli\u003ea {@linkplain #isAnonymousClass() anonymous class}\n     * \u003cli\u003ea {@linkplain #isHidden() hidden class}\n     * \u003cli\u003ean array whose component type does not have a canonical name\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * @return the canonical name of the underlying class if it exists, and\n     * {@code null} otherwise.\n     * @since 1.5\n     */\n    public String getCanonicalName() {\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        String canonicalName \u003d rd.canonicalName;\n        if (canonicalName \u003d\u003d null) {\n            rd.canonicalName \u003d canonicalName \u003d getCanonicalName0();\n        }\n        return canonicalName \u003d\u003d ReflectionData.NULL_SENTINEL? null : canonicalName;\n    }\n\n    private String getCanonicalName0() {\n        if (isArray()) {\n            String canonicalName \u003d getComponentType().getCanonicalName();\n            if (canonicalName !\u003d null)\n                return canonicalName + \"[]\";\n            else\n                return ReflectionData.NULL_SENTINEL;\n        }\n        if (isHidden() || isLocalOrAnonymousClass())\n            return ReflectionData.NULL_SENTINEL;\n        Class\u003c?\u003e enclosingClass \u003d getEnclosingClass();\n        if (enclosingClass \u003d\u003d null) { // top level class\n            return getName();\n        } else {\n            String enclosingName \u003d enclosingClass.getCanonicalName();\n            if (enclosingName \u003d\u003d null)\n                return ReflectionData.NULL_SENTINEL;\n            return enclosingName + \".\" + getSimpleName();\n        }\n    }\n\n    /**\n     * Returns {@code true} if and only if the underlying class\n     * is an anonymous class.\n     *\n     * @apiNote\n     * An anonymous class is not a {@linkplain #isHidden() hidden class}.\n     *\n     * @return {@code true} if and only if this class is an anonymous class.\n     * @since 1.5\n     */\n    public boolean isAnonymousClass() {\n        return !isArray() \u0026\u0026 isLocalOrAnonymousClass() \u0026\u0026\n                getSimpleBinaryName0() \u003d\u003d null;\n    }\n\n    /**\n     * Returns {@code true} if and only if the underlying class\n     * is a local class.\n     *\n     * @return {@code true} if and only if this class is a local class.\n     * @since 1.5\n     */\n    public boolean isLocalClass() {\n        return isLocalOrAnonymousClass() \u0026\u0026\n                (isArray() || getSimpleBinaryName0() !\u003d null);\n    }\n\n    /**\n     * Returns {@code true} if and only if the underlying class\n     * is a member class.\n     *\n     * @return {@code true} if and only if this class is a member class.\n     * @since 1.5\n     */\n    public boolean isMemberClass() {\n        return !isLocalOrAnonymousClass() \u0026\u0026 getDeclaringClass0() !\u003d null;\n    }\n\n    /**\n     * Returns the \"simple binary name\" of the underlying class, i.e.,\n     * the binary name without the leading enclosing class name.\n     * Returns {@code null} if the underlying class is a top level\n     * class.\n     */\n    private String getSimpleBinaryName() {\n        if (isTopLevelClass())\n            return null;\n        String name \u003d getSimpleBinaryName0();\n        if (name \u003d\u003d null) // anonymous class\n            return \"\";\n        return name;\n    }\n\n    private native String getSimpleBinaryName0();\n\n    /**\n     * Returns {@code true} if this is a top level class.  Returns {@code false}\n     * otherwise.\n     */\n    private boolean isTopLevelClass() {\n        return !isLocalOrAnonymousClass() \u0026\u0026 getDeclaringClass0() \u003d\u003d null;\n    }\n\n    /**\n     * Returns {@code true} if this is a local class or an anonymous\n     * class.  Returns {@code false} otherwise.\n     */\n    private boolean isLocalOrAnonymousClass() {\n        // JVM Spec 4.7.7: A class must have an EnclosingMethod\n        // attribute if and only if it is a local class or an\n        // anonymous class.\n        return hasEnclosingMethodInfo();\n    }\n\n    private boolean hasEnclosingMethodInfo() {\n        Object[] enclosingInfo \u003d getEnclosingMethod0();\n        if (enclosingInfo !\u003d null) {\n            EnclosingMethodInfo.validate(enclosingInfo);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns an array containing {@code Class} objects representing all\n     * the public classes and interfaces that are members of the class\n     * represented by this {@code Class} object.  This includes public\n     * class and interface members inherited from superclasses and public class\n     * and interface members declared by the class.  This method returns an\n     * array of length 0 if this {@code Class} object has no public member\n     * classes or interfaces.  This method also returns an array of length 0 if\n     * this {@code Class} object represents a primitive type, an array\n     * class, or void.\n     *\n     * @return the array of {@code Class} objects representing the public\n     *         members of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e[] getClasses() {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), false);\n        }\n\n        // Privileged so this implementation can look at DECLARED classes,\n        // something the caller might not have privilege to do.  The code here\n        // is allowed to look at DECLARED classes because (1) it does not hand\n        // out anything other than public members and (2) public member access\n        // has already been ok\u0027d by the SecurityManager.\n\n        return java.security.AccessController.doPrivileged(\n            new java.security.PrivilegedAction\u003c\u003e() {\n                public Class\u003c?\u003e[] run() {\n                    List\u003cClass\u003c?\u003e\u003e list \u003d new ArrayList\u003c\u003e();\n                    Class\u003c?\u003e currentClass \u003d Class.this;\n                    while (currentClass !\u003d null) {\n                        for (Class\u003c?\u003e m : currentClass.getDeclaredClasses()) {\n                            if (Modifier.isPublic(m.getModifiers())) {\n                                list.add(m);\n                            }\n                        }\n                        currentClass \u003d currentClass.getSuperclass();\n                    }\n                    return list.toArray(new Class\u003c?\u003e[0]);\n                }\n            });\n    }\n\n\n    /**\n     * Returns an array containing {@code Field} objects reflecting all\n     * the accessible public fields of the class or interface represented by\n     * this {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface with\n     * no accessible public fields, then this method returns an array of length\n     * 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class, then this method\n     * returns the public fields of the class and of all its superclasses and\n     * superinterfaces.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface, then this\n     * method returns the fields of the interface and of all its\n     * superinterfaces.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n     * type, or void, then this method returns an array of length 0.\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * @return the array of {@code Field} objects representing the\n     *         public fields\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field[] getFields() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return copyFields(privateGetPublicFields());\n    }\n\n\n    /**\n     * Returns an array containing {@code Method} objects reflecting all the\n     * public methods of the class or interface represented by this {@code\n     * Class} object, including those declared by the class or interface and\n     * those inherited from superclasses and superinterfaces.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then the\n     * returned array has a {@code Method} object for each of the public\n     * methods inherited by the array type from {@code Object}. It does not\n     * contain a {@code Method} object for {@code clone()}.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface then the\n     * returned array does not contain any implicitly declared methods from\n     * {@code Object}. Therefore, if no methods are explicitly declared in\n     * this interface or any of its superinterfaces then the returned array\n     * has length 0. (Note that a {@code Class} object which represents a class\n     * always has public methods, inherited from {@code Object}.)\n     *\n     * \u003cp\u003e The returned array never contains methods with names \"{@code \u003cinit\u003e}\"\n     * or \"{@code \u003cclinit\u003e}\".\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * \u003cp\u003e Generally, the result is computed as with the following 4 step algorithm.\n     * Let C be the class or interface represented by this {@code Class} object:\n     * \u003col\u003e\n     * \u003cli\u003e A union of methods is composed of:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e C\u0027s declared public instance and static methods as returned by\n     *        {@link #getDeclaredMethods()} and filtered to include only public\n     *        methods.\u003c/li\u003e\n     *   \u003cli\u003e If C is a class other than {@code Object}, then include the result\n     *        of invoking this algorithm recursively on the superclass of C.\u003c/li\u003e\n     *   \u003cli\u003e Include the results of invoking this algorithm recursively on all\n     *        direct superinterfaces of C, but include only instance methods.\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e Union from step 1 is partitioned into subsets of methods with same\n     *      signature (name, parameter types) and return type.\u003c/li\u003e\n     * \u003cli\u003e Within each such subset only the most specific methods are selected.\n     *      Let method M be a method from a set of methods with same signature\n     *      and return type. M is most specific if there is no such method\n     *      N !\u003d M from the same set, such that N is more specific than M.\n     *      N is more specific than M if:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e N is declared by a class and M is declared by an interface; or\u003c/li\u003e\n     *   \u003cli\u003e N and M are both declared by classes or both by interfaces and\n     *        N\u0027s declaring type is the same as or a subtype of M\u0027s declaring type\n     *        (clearly, if M\u0027s and N\u0027s declaring types are the same type, then\n     *        M and N are the same method).\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e The result of this algorithm is the union of all selected methods from\n     *      step 3.\u003c/li\u003e\n     * \u003c/ol\u003e\n     *\n     * @apiNote There may be more than one method with a particular name\n     * and parameter types in a class because while the Java language forbids a\n     * class to declare multiple methods with the same signature but different\n     * return types, the Java virtual machine does not.  This\n     * increased flexibility in the virtual machine can be used to\n     * implement various language features.  For example, covariant\n     * returns can be implemented with {@linkplain\n     * java.lang.reflect.Method#isBridge bridge methods}; the bridge\n     * method and the overriding method would have the same\n     * signature but different return types.\n     *\n     * @return the array of {@code Method} objects representing the\n     *         public methods of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method[] getMethods() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return copyMethods(privateGetPublicMethods());\n    }\n\n\n    /**\n     * Returns an array containing {@code Constructor} objects reflecting\n     * all the public constructors of the class represented by this\n     * {@code Class} object.  An array of length 0 is returned if the\n     * class has no public constructors, or if the class is an array class, or\n     * if the class reflects a primitive type or void.\n     *\n     * @apiNote\n     * While this method returns an array of {@code\n     * Constructor\u003cT\u003e} objects (that is an array of constructors from\n     * this class), the return type of this method is {@code\n     * Constructor\u003c?\u003e[]} and \u003cem\u003enot\u003c/em\u003e {@code Constructor\u003cT\u003e[]} as\n     * might be expected.  This less informative return type is\n     * necessary since after being returned from this method, the\n     * array could be modified to hold {@code Constructor} objects for\n     * different classes, which would violate the type guarantees of\n     * {@code Constructor\u003cT\u003e[]}.\n     *\n     * @return the array of {@code Constructor} objects representing the\n     *         public constructors of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003c?\u003e[] getConstructors() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return copyConstructors(privateGetDeclaredConstructors(true));\n    }\n\n\n    /**\n     * Returns a {@code Field} object that reflects the specified public member\n     * field of the class or interface represented by this {@code Class}\n     * object. The {@code name} parameter is a {@code String} specifying the\n     * simple name of the desired field.\n     *\n     * \u003cp\u003e The field to be reflected is determined by the algorithm that\n     * follows.  Let C be the class or interface represented by this {@code Class} object:\n     *\n     * \u003cOL\u003e\n     * \u003cLI\u003e If C declares a public field with the name specified, that is the\n     *      field to be reflected.\u003c/LI\u003e\n     * \u003cLI\u003e If no field was found in step 1 above, this algorithm is applied\n     *      recursively to each direct superinterface of C. The direct\n     *      superinterfaces are searched in the order they were declared.\u003c/LI\u003e\n     * \u003cLI\u003e If no field was found in steps 1 and 2 above, and C has a\n     *      superclass S, then this algorithm is invoked recursively upon S.\n     *      If C has no superclass, then a {@code NoSuchFieldException}\n     *      is thrown.\u003c/LI\u003e\n     * \u003c/OL\u003e\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method does not find the {@code length} field of the array type.\n     *\n     * @param name the field name\n     * @return the {@code Field} object of this class specified by\n     *         {@code name}\n     * @throws NoSuchFieldException if a field with the specified name is\n     *         not found.\n     * @throws NullPointerException if {@code name} is {@code null}\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field getField(String name)\n        throws NoSuchFieldException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        Field field \u003d getField0(name);\n        if (field \u003d\u003d null) {\n            throw new NoSuchFieldException(name);\n        }\n        return getReflectionFactory().copyField(field);\n    }\n\n\n    /**\n     * Returns a {@code Method} object that reflects the specified public\n     * member method of the class or interface represented by this\n     * {@code Class} object. The {@code name} parameter is a\n     * {@code String} specifying the simple name of the desired method. The\n     * {@code parameterTypes} parameter is an array of {@code Class}\n     * objects that identify the method\u0027s formal parameter types, in declared\n     * order. If {@code parameterTypes} is {@code null}, it is\n     * treated as if it were an empty array.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method finds any public method inherited by the array type from\n     * {@code Object} except method {@code clone()}.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface then this\n     * method does not find any implicitly declared method from\n     * {@code Object}. Therefore, if no methods are explicitly declared in\n     * this interface or any of its superinterfaces, then this method does not\n     * find any method.\n     *\n     * \u003cp\u003e This method does not find any method with name \"{@code \u003cinit\u003e}\" or\n     * \"{@code \u003cclinit\u003e}\".\n     *\n     * \u003cp\u003e Generally, the method to be reflected is determined by the 4 step\n     * algorithm that follows.\n     * Let C be the class or interface represented by this {@code Class} object:\n     * \u003col\u003e\n     * \u003cli\u003e A union of methods is composed of:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e C\u0027s declared public instance and static methods as returned by\n     *        {@link #getDeclaredMethods()} and filtered to include only public\n     *        methods that match given {@code name} and {@code parameterTypes}\u003c/li\u003e\n     *   \u003cli\u003e If C is a class other than {@code Object}, then include the result\n     *        of invoking this algorithm recursively on the superclass of C.\u003c/li\u003e\n     *   \u003cli\u003e Include the results of invoking this algorithm recursively on all\n     *        direct superinterfaces of C, but include only instance methods.\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e This union is partitioned into subsets of methods with same\n     *      return type (the selection of methods from step 1 also guarantees that\n     *      they have the same method name and parameter types).\u003c/li\u003e\n     * \u003cli\u003e Within each such subset only the most specific methods are selected.\n     *      Let method M be a method from a set of methods with same VM\n     *      signature (return type, name, parameter types).\n     *      M is most specific if there is no such method N !\u003d M from the same\n     *      set, such that N is more specific than M. N is more specific than M\n     *      if:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e N is declared by a class and M is declared by an interface; or\u003c/li\u003e\n     *   \u003cli\u003e N and M are both declared by classes or both by interfaces and\n     *        N\u0027s declaring type is the same as or a subtype of M\u0027s declaring type\n     *        (clearly, if M\u0027s and N\u0027s declaring types are the same type, then\n     *        M and N are the same method).\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e The result of this algorithm is chosen arbitrarily from the methods\n     *      with most specific return type among all selected methods from step 3.\n     *      Let R be a return type of a method M from the set of all selected methods\n     *      from step 3. M is a method with most specific return type if there is\n     *      no such method N !\u003d M from the same set, having return type S !\u003d R,\n     *      such that S is a subtype of R as determined by\n     *      R.class.{@link #isAssignableFrom}(S.class).\n     * \u003c/ol\u003e\n     *\n     * @apiNote There may be more than one method with matching name and\n     * parameter types in a class because while the Java language forbids a\n     * class to declare multiple methods with the same signature but different\n     * return types, the Java virtual machine does not.  This\n     * increased flexibility in the virtual machine can be used to\n     * implement various language features.  For example, covariant\n     * returns can be implemented with {@linkplain\n     * java.lang.reflect.Method#isBridge bridge methods}; the bridge\n     * method and the overriding method would have the same\n     * signature but different return types. This method would return the\n     * overriding method as it would have a more specific return type.\n     *\n     * @param name the name of the method\n     * @param parameterTypes the list of parameters\n     * @return the {@code Method} object that matches the specified\n     *         {@code name} and {@code parameterTypes}\n     * @throws NoSuchMethodException if a matching method is not found\n     *         or if the name is \"\u0026lt;init\u0026gt;\"or \"\u0026lt;clinit\u0026gt;\".\n     * @throws NullPointerException if {@code name} is {@code null}\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method getMethod(String name, Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        Method method \u003d getMethod0(name, parameterTypes);\n        if (method \u003d\u003d null) {\n            throw new NoSuchMethodException(methodToString(name, parameterTypes));\n        }\n        return getReflectionFactory().copyMethod(method);\n    }\n\n    /**\n     * Returns a {@code Constructor} object that reflects the specified\n     * public constructor of the class represented by this {@code Class}\n     * object. The {@code parameterTypes} parameter is an array of\n     * {@code Class} objects that identify the constructor\u0027s formal\n     * parameter types, in declared order.\n     *\n     * If this {@code Class} object represents an inner class\n     * declared in a non-static context, the formal parameter types\n     * include the explicit enclosing instance as the first parameter.\n     *\n     * \u003cp\u003e The constructor to reflect is the public constructor of the class\n     * represented by this {@code Class} object whose formal parameter\n     * types match those specified by {@code parameterTypes}.\n     *\n     * @param parameterTypes the parameter array\n     * @return the {@code Constructor} object of the public constructor that\n     *         matches the specified {@code parameterTypes}\n     * @throws NoSuchMethodException if a matching method is not found.\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003cT\u003e getConstructor(Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException\n    {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return getReflectionFactory().copyConstructor(\n            getConstructor0(parameterTypes, Member.PUBLIC));\n    }\n\n\n    /**\n     * Returns an array of {@code Class} objects reflecting all the\n     * classes and interfaces declared as members of the class represented by\n     * this {@code Class} object. This includes public, protected, default\n     * (package) access, and private classes and interfaces declared by the\n     * class, but excludes inherited classes and interfaces.  This method\n     * returns an array of length 0 if the class declares no classes or\n     * interfaces as members, or if this {@code Class} object represents a\n     * primitive type, an array class, or void.\n     *\n     * @return the array of {@code Class} objects representing all the\n     *         declared members of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *         following conditions is met:\n     *\n     *         \u003cul\u003e\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *         class loader of this class and invocation of\n     *         {@link SecurityManager#checkPermission\n     *         s.checkPermission} method with\n     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *         denies access to the declared classes within this class\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class\n     *\n     *         \u003c/ul\u003e\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e[] getDeclaredClasses() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), false);\n        }\n        return getDeclaredClasses0();\n    }\n\n\n    /**\n     * Returns an array of {@code Field} objects reflecting all the fields\n     * declared by the class or interface represented by this\n     * {@code Class} object. This includes public, protected, default\n     * (package) access, and private fields, but excludes inherited fields.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface with no\n     * declared fields, then this method returns an array of length 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n     * type, or void, then this method returns an array of length 0.\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * @return  the array of {@code Field} objects representing all the\n     *          declared fields of this class\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared fields within this class\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field[] getDeclaredFields() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        return copyFields(privateGetDeclaredFields(false));\n    }\n\n    /**\n     * Returns an array of {@code RecordComponent} objects representing all the\n     * record components of this record class, or {@code null} if this class is\n     * not a record class.\n     *\n     * \u003cp\u003e The components are returned in the same order that they are declared\n     * in the record header. The array is empty if this record class has no\n     * components. If the class is not a record class, that is {@link\n     * #isRecord()} returns {@code false}, then this method returns {@code null}.\n     * Conversely, if {@link #isRecord()} returns {@code true}, then this method\n     * returns a non-null value.\n     *\n     * @return  An array of {@code RecordComponent} objects representing all the\n     *          record components of this record class, or {@code null} if this\n     *          class is not a record class\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared methods within this class\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @jls 8.10 Record Classes\n     * @since 16\n     */\n    @CallerSensitive\n    public RecordComponent[] getRecordComponents() {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        if (!isRecord()) {\n            return null;\n        }\n        return getRecordComponents0();\n    }\n\n    /**\n     * Returns an array containing {@code Method} objects reflecting all the\n     * declared methods of the class or interface represented by this {@code\n     * Class} object, including public, protected, default (package)\n     * access, and private methods, but excluding inherited methods.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface that\n     * has multiple declared methods with the same name and parameter types,\n     * but different return types, then the returned array has a {@code Method}\n     * object for each such method.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface that\n     * has a class initialization method {@code \u003cclinit\u003e}, then the returned\n     * array does \u003cem\u003enot\u003c/em\u003e have a corresponding {@code Method} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface with no\n     * declared methods, then the returned array has length 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n     * type, or void, then the returned array has length 0.\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * @return  the array of {@code Method} objects representing all the\n     *          declared methods of this class\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared methods within this class\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method[] getDeclaredMethods() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        return copyMethods(privateGetDeclaredMethods(false));\n    }\n\n\n    /**\n     * Returns an array of {@code Constructor} objects reflecting all the\n     * constructors declared by the class represented by this\n     * {@code Class} object. These are public, protected, default\n     * (package) access, and private constructors.  The elements in the array\n     * returned are not sorted and are not in any particular order.  If the\n     * class has a default constructor, it is included in the returned array.\n     * This method returns an array of length 0 if this {@code Class}\n     * object represents an interface, a primitive type, an array class, or\n     * void.\n     *\n     * \u003cp\u003e See \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e,\n     * section {@jls 8.2}.\n     *\n     * @return  the array of {@code Constructor} objects representing all the\n     *          declared constructors of this class\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared constructors within this class\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003c?\u003e[] getDeclaredConstructors() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        return copyConstructors(privateGetDeclaredConstructors(false));\n    }\n\n\n    /**\n     * Returns a {@code Field} object that reflects the specified declared\n     * field of the class or interface represented by this {@code Class}\n     * object. The {@code name} parameter is a {@code String} that specifies\n     * the simple name of the desired field.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method does not find the {@code length} field of the array type.\n     *\n     * @param name the name of the field\n     * @return  the {@code Field} object for the specified field in this\n     *          class\n     * @throws  NoSuchFieldException if a field with the specified name is\n     *          not found.\n     * @throws  NullPointerException if {@code name} is {@code null}\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared field\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field getDeclaredField(String name)\n        throws NoSuchFieldException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        Field field \u003d searchFields(privateGetDeclaredFields(false), name);\n        if (field \u003d\u003d null) {\n            throw new NoSuchFieldException(name);\n        }\n        return getReflectionFactory().copyField(field);\n    }\n\n\n    /**\n     * Returns a {@code Method} object that reflects the specified\n     * declared method of the class or interface represented by this\n     * {@code Class} object. The {@code name} parameter is a\n     * {@code String} that specifies the simple name of the desired\n     * method, and the {@code parameterTypes} parameter is an array of\n     * {@code Class} objects that identify the method\u0027s formal parameter\n     * types, in declared order.  If more than one method with the same\n     * parameter types is declared in a class, and one of these methods has a\n     * return type that is more specific than any of the others, that method is\n     * returned; otherwise one of the methods is chosen arbitrarily.  If the\n     * name is \"\u0026lt;init\u0026gt;\"or \"\u0026lt;clinit\u0026gt;\" a {@code NoSuchMethodException}\n     * is raised.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method does not find the {@code clone()} method.\n     *\n     * @param name the name of the method\n     * @param parameterTypes the parameter array\n     * @return  the {@code Method} object for the method of this class\n     *          matching the specified name and parameters\n     * @throws  NoSuchMethodException if a matching method is not found.\n     * @throws  NullPointerException if {@code name} is {@code null}\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared method\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method getDeclaredMethod(String name, Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        Method method \u003d searchMethods(privateGetDeclaredMethods(false), name, parameterTypes);\n        if (method \u003d\u003d null) {\n            throw new NoSuchMethodException(methodToString(name, parameterTypes));\n        }\n        return getReflectionFactory().copyMethod(method);\n    }\n\n    /**\n     * Returns the list of {@code Method} objects for the declared public\n     * methods of this class or interface that have the specified method name\n     * and parameter types.\n     *\n     * @param name the name of the method\n     * @param parameterTypes the parameter array\n     * @return the list of {@code Method} objects for the public methods of\n     *         this class matching the specified name and parameters\n     */\n    List\u003cMethod\u003e getDeclaredPublicMethods(String name, Class\u003c?\u003e... parameterTypes) {\n        Method[] methods \u003d privateGetDeclaredMethods(/* publicOnly */ true);\n        ReflectionFactory factory \u003d getReflectionFactory();\n        List\u003cMethod\u003e result \u003d new ArrayList\u003c\u003e();\n        for (Method method : methods) {\n            if (method.getName().equals(name)\n                \u0026\u0026 Arrays.equals(\n                    factory.getExecutableSharedParameterTypes(method),\n                    parameterTypes)) {\n                result.add(factory.copyMethod(method));\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Returns a {@code Constructor} object that reflects the specified\n     * constructor of the class or interface represented by this\n     * {@code Class} object.  The {@code parameterTypes} parameter is\n     * an array of {@code Class} objects that identify the constructor\u0027s\n     * formal parameter types, in declared order.\n     *\n     * If this {@code Class} object represents an inner class\n     * declared in a non-static context, the formal parameter types\n     * include the explicit enclosing instance as the first parameter.\n     *\n     * @param parameterTypes the parameter array\n     * @return  The {@code Constructor} object for the constructor with the\n     *          specified parameter list\n     * @throws  NoSuchMethodException if a matching method is not found.\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared constructor\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003cT\u003e getDeclaredConstructor(Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException\n    {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n\n        return getReflectionFactory().copyConstructor(\n            getConstructor0(parameterTypes, Member.DECLARED));\n    }\n\n    /**\n     * Finds a resource with a given name.\n     *\n     * \u003cp\u003e If this class is in a named {@link Module Module} then this method\n     * will attempt to find the resource in the module. This is done by\n     * delegating to the module\u0027s class loader {@link\n     * ClassLoader#findResource(String,String) findResource(String,String)}\n     * method, invoking it with the module name and the absolute name of the\n     * resource. Resources in named modules are subject to the rules for\n     * encapsulation specified in the {@code Module} {@link\n     * Module#getResourceAsStream getResourceAsStream} method and so this\n     * method returns {@code null} when the resource is a\n     * non-\"{@code .class}\" resource in a package that is not open to the\n     * caller\u0027s module.\n     *\n     * \u003cp\u003e Otherwise, if this class is not in a named module then the rules for\n     * searching resources associated with a given class are implemented by the\n     * defining {@linkplain ClassLoader class loader} of the class.  This method\n     * delegates to this {@code Class} object\u0027s class loader.\n     * If this {@code Class} object was loaded by the bootstrap class loader,\n     * the method delegates to {@link ClassLoader#getSystemResourceAsStream}.\n     *\n     * \u003cp\u003e Before delegation, an absolute resource name is constructed from the\n     * given resource name using this algorithm:\n     *\n     * \u003cul\u003e\n     *\n     * \u003cli\u003e If the {@code name} begins with a {@code \u0027/\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002f\u0027\u003c/code\u003e), then the absolute name of the resource is the\n     * portion of the {@code name} following the {@code \u0027/\u0027}.\n     *\n     * \u003cli\u003e Otherwise, the absolute name is of the following form:\n     *\n     * \u003cblockquote\u003e\n     *   {@code modified_package_name/name}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e Where the {@code modified_package_name} is the package name of this\n     * object with {@code \u0027/\u0027} substituted for {@code \u0027.\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002e\u0027\u003c/code\u003e).\n     *\n     * \u003c/ul\u003e\n     *\n     * @param  name name of the desired resource\n     * @return  A {@link java.io.InputStream} object; {@code null} if no\n     *          resource with this name is found, the resource is in a package\n     *          that is not {@linkplain Module#isOpen(String, Module) open} to at\n     *          least the caller module, or access to the resource is denied\n     *          by the security manager.\n     * @throws  NullPointerException If {@code name} is {@code null}\n     *\n     * @see Module#getResourceAsStream(String)\n     * @since  1.1\n     * @revised 9\n     */\n    @CallerSensitive\n    public InputStream getResourceAsStream(String name) {\n        name \u003d resolveName(name);\n\n        Module thisModule \u003d getModule();\n        if (thisModule.isNamed()) {\n            // check if resource can be located by caller\n            if (Resources.canEncapsulate(name)\n                \u0026\u0026 !isOpenToCaller(name, Reflection.getCallerClass())) {\n                return null;\n            }\n\n            // resource not encapsulated or in package open to caller\n            String mn \u003d thisModule.getName();\n            ClassLoader cl \u003d getClassLoader0();\n            try {\n\n                // special-case built-in class loaders to avoid the\n                // need for a URL connection\n                if (cl \u003d\u003d null) {\n                    return BootLoader.findResourceAsStream(mn, name);\n                } else if (cl instanceof BuiltinClassLoader) {\n                    return ((BuiltinClassLoader) cl).findResourceAsStream(mn, name);\n                } else {\n                    URL url \u003d cl.findResource(mn, name);\n                    return (url !\u003d null) ? url.openStream() : null;\n                }\n\n            } catch (IOException | SecurityException e) {\n                return null;\n            }\n        }\n\n        // unnamed module\n        ClassLoader cl \u003d getClassLoader0();\n        if (cl \u003d\u003d null) {\n            return ClassLoader.getSystemResourceAsStream(name);\n        } else {\n            return cl.getResourceAsStream(name);\n        }\n    }\n\n    /**\n     * Finds a resource with a given name.\n     *\n     * \u003cp\u003e If this class is in a named {@link Module Module} then this method\n     * will attempt to find the resource in the module. This is done by\n     * delegating to the module\u0027s class loader {@link\n     * ClassLoader#findResource(String,String) findResource(String,String)}\n     * method, invoking it with the module name and the absolute name of the\n     * resource. Resources in named modules are subject to the rules for\n     * encapsulation specified in the {@code Module} {@link\n     * Module#getResourceAsStream getResourceAsStream} method and so this\n     * method returns {@code null} when the resource is a\n     * non-\"{@code .class}\" resource in a package that is not open to the\n     * caller\u0027s module.\n     *\n     * \u003cp\u003e Otherwise, if this class is not in a named module then the rules for\n     * searching resources associated with a given class are implemented by the\n     * defining {@linkplain ClassLoader class loader} of the class.  This method\n     * delegates to this {@code Class} object\u0027s class loader.\n     * If this {@code Class} object was loaded by the bootstrap class loader,\n     * the method delegates to {@link ClassLoader#getSystemResource}.\n     *\n     * \u003cp\u003e Before delegation, an absolute resource name is constructed from the\n     * given resource name using this algorithm:\n     *\n     * \u003cul\u003e\n     *\n     * \u003cli\u003e If the {@code name} begins with a {@code \u0027/\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002f\u0027\u003c/code\u003e), then the absolute name of the resource is the\n     * portion of the {@code name} following the {@code \u0027/\u0027}.\n     *\n     * \u003cli\u003e Otherwise, the absolute name is of the following form:\n     *\n     * \u003cblockquote\u003e\n     *   {@code modified_package_name/name}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e Where the {@code modified_package_name} is the package name of this\n     * object with {@code \u0027/\u0027} substituted for {@code \u0027.\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002e\u0027\u003c/code\u003e).\n     *\n     * \u003c/ul\u003e\n     *\n     * @param  name name of the desired resource\n     * @return A {@link java.net.URL} object; {@code null} if no resource with\n     *         this name is found, the resource cannot be located by a URL, the\n     *         resource is in a package that is not\n     *         {@linkplain Module#isOpen(String, Module) open} to at least the caller\n     *         module, or access to the resource is denied by the security\n     *         manager.\n     * @throws NullPointerException If {@code name} is {@code null}\n     * @since  1.1\n     * @revised 9\n     */\n    @CallerSensitive\n    public URL getResource(String name) {\n        name \u003d resolveName(name);\n\n        Module thisModule \u003d getModule();\n        if (thisModule.isNamed()) {\n            // check if resource can be located by caller\n            if (Resources.canEncapsulate(name)\n                \u0026\u0026 !isOpenToCaller(name, Reflection.getCallerClass())) {\n                return null;\n            }\n\n            // resource not encapsulated or in package open to caller\n            String mn \u003d thisModule.getName();\n            ClassLoader cl \u003d getClassLoader0();\n            try {\n                if (cl \u003d\u003d null) {\n                    return BootLoader.findResource(mn, name);\n                } else {\n                    return cl.findResource(mn, name);\n                }\n            } catch (IOException ioe) {\n                return null;\n            }\n        }\n\n        // unnamed module\n        ClassLoader cl \u003d getClassLoader0();\n        if (cl \u003d\u003d null) {\n            return ClassLoader.getSystemResource(name);\n        } else {\n            return cl.getResource(name);\n        }\n    }\n\n    /**\n     * Returns true if a resource with the given name can be located by the\n     * given caller. All resources in a module can be located by code in\n     * the module. For other callers, then the package needs to be open to\n     * the caller.\n     */\n    private boolean isOpenToCaller(String name, Class\u003c?\u003e caller) {\n        // assert getModule().isNamed();\n        Module thisModule \u003d getModule();\n        Module callerModule \u003d (caller !\u003d null) ? caller.getModule() : null;\n        if (callerModule !\u003d thisModule) {\n            String pn \u003d Resources.toPackageName(name);\n            if (thisModule.getDescriptor().packages().contains(pn)) {\n                if (callerModule \u003d\u003d null \u0026\u0026 !thisModule.isOpen(pn)) {\n                    // no caller, package not open\n                    return false;\n                }\n                if (!thisModule.isOpen(pn, callerModule)) {\n                    // package not open to caller\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n\n    /** protection domain returned when the internal domain is null */\n    private static java.security.ProtectionDomain allPermDomain;\n\n    /**\n     * Returns the {@code ProtectionDomain} of this class.  If there is a\n     * security manager installed, this method first calls the security\n     * manager\u0027s {@code checkPermission} method with a\n     * {@code RuntimePermission(\"getProtectionDomain\")} permission to\n     * ensure it\u0027s ok to get the\n     * {@code ProtectionDomain}.\n     *\n     * @return the ProtectionDomain of this class\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn\u0027t allow\n     *        getting the ProtectionDomain.\n     *\n     * @see java.security.ProtectionDomain\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     * @since 1.2\n     */\n    public java.security.ProtectionDomain getProtectionDomain() {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            sm.checkPermission(SecurityConstants.GET_PD_PERMISSION);\n        }\n        return protectionDomain();\n    }\n\n    // package-private\n    java.security.ProtectionDomain protectionDomain() {\n        java.security.ProtectionDomain pd \u003d getProtectionDomain0();\n        if (pd \u003d\u003d null) {\n            if (allPermDomain \u003d\u003d null) {\n                java.security.Permissions perms \u003d\n                    new java.security.Permissions();\n                perms.add(SecurityConstants.ALL_PERMISSION);\n                allPermDomain \u003d\n                    new java.security.ProtectionDomain(null, perms);\n            }\n            pd \u003d allPermDomain;\n        }\n        return pd;\n    }\n\n    /**\n     * Returns the ProtectionDomain of this class.\n     */\n    private native java.security.ProtectionDomain getProtectionDomain0();\n\n    /*\n     * Return the Virtual Machine\u0027s Class object for the named\n     * primitive type.\n     */\n    static native Class\u003c?\u003e getPrimitiveClass(String name);\n\n    /*\n     * Check if client is allowed to access members.  If access is denied,\n     * throw a SecurityException.\n     *\n     * This method also enforces package access.\n     *\n     * \u003cp\u003e Default policy: allow all clients access with normal Java access\n     * control.\n     *\n     * \u003cp\u003e NOTE: should only be called if a SecurityManager is installed\n     */\n    private void checkMemberAccess(SecurityManager sm, int which,\n                                   Class\u003c?\u003e caller, boolean checkProxyInterfaces) {\n        /* Default policy allows access to all {@link Member#PUBLIC} members,\n         * as well as access to classes that have the same class loader as the caller.\n         * In all other cases, it requires RuntimePermission(\"accessDeclaredMembers\")\n         * permission.\n         */\n        final ClassLoader ccl \u003d ClassLoader.getClassLoader(caller);\n        if (which !\u003d Member.PUBLIC) {\n            final ClassLoader cl \u003d getClassLoader0();\n            if (ccl !\u003d cl) {\n                sm.checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);\n            }\n        }\n        this.checkPackageAccess(sm, ccl, checkProxyInterfaces);\n    }\n\n    /*\n     * Checks if a client loaded in ClassLoader ccl is allowed to access this\n     * class under the current package access policy. If access is denied,\n     * throw a SecurityException.\n     *\n     * NOTE: this method should only be called if a SecurityManager is active\n     */\n    private void checkPackageAccess(SecurityManager sm, final ClassLoader ccl,\n                                    boolean checkProxyInterfaces) {\n        final ClassLoader cl \u003d getClassLoader0();\n\n        if (ReflectUtil.needsPackageAccessCheck(ccl, cl)) {\n            String pkg \u003d this.getPackageName();\n            if (pkg !\u003d null \u0026\u0026 !pkg.isEmpty()) {\n                // skip the package access check on a proxy class in default proxy package\n                if (!Proxy.isProxyClass(this) || ReflectUtil.isNonPublicProxyClass(this)) {\n                    sm.checkPackageAccess(pkg);\n                }\n            }\n        }\n        // check package access on the proxy interfaces\n        if (checkProxyInterfaces \u0026\u0026 Proxy.isProxyClass(this)) {\n            ReflectUtil.checkProxyPackageAccess(ccl, this.getInterfaces());\n        }\n    }\n\n    /*\n     * Checks if a client loaded in ClassLoader ccl is allowed to access the provided\n     * classes under the current package access policy. If access is denied,\n     * throw a SecurityException.\n     *\n     * NOTE: this method should only be called if a SecurityManager is active\n     *       classes must be non-empty\n     *       all classes provided must be loaded by the same ClassLoader\n     * NOTE: this method does not support Proxy classes\n     */\n    private static void checkPackageAccessForPermittedSubclasses(SecurityManager sm,\n                                    final ClassLoader ccl, Class\u003c?\u003e[] subClasses) {\n        final ClassLoader cl \u003d subClasses[0].getClassLoader0();\n\n        if (ReflectUtil.needsPackageAccessCheck(ccl, cl)) {\n            Set\u003cString\u003e packages \u003d new HashSet\u003c\u003e();\n\n            for (Class\u003c?\u003e c : subClasses) {\n                if (Proxy.isProxyClass(c))\n                    throw new InternalError(\"a permitted subclass should not be a proxy class: \" + c);\n                String pkg \u003d c.getPackageName();\n                if (pkg !\u003d null \u0026\u0026 !pkg.isEmpty()) {\n                    packages.add(pkg);\n                }\n            }\n            for (String pkg : packages) {\n                sm.checkPackageAccess(pkg);\n            }\n        }\n    }\n\n    /**\n     * Add a package name prefix if the name is not absolute Remove leading \"/\"\n     * if name is absolute\n     */\n    private String resolveName(String name) {\n        if (!name.startsWith(\"/\")) {\n            Class\u003c?\u003e c \u003d isArray() ? elementType() : this;\n            String baseName \u003d c.getPackageName();\n            if (baseName !\u003d null \u0026\u0026 !baseName.isEmpty()) {\n                name \u003d baseName.replace(\u0027.\u0027, \u0027/\u0027) + \"/\" + name;\n            }\n        } else {\n            name \u003d name.substring(1);\n        }\n        return name;\n    }\n\n    /**\n     * Atomic operations support.\n     */\n    private static class Atomic {\n        // initialize Unsafe machinery here, since we need to call Class.class instance method\n        // and have to avoid calling it in the static initializer of the Class class...\n        private static final Unsafe unsafe \u003d Unsafe.getUnsafe();\n        // offset of Class.reflectionData instance field\n        private static final long reflectionDataOffset\n                \u003d unsafe.objectFieldOffset(Class.class, \"reflectionData\");\n        // offset of Class.annotationType instance field\n        private static final long annotationTypeOffset\n                \u003d unsafe.objectFieldOffset(Class.class, \"annotationType\");\n        // offset of Class.annotationData instance field\n        private static final long annotationDataOffset\n                \u003d unsafe.objectFieldOffset(Class.class, \"annotationData\");\n\n        static \u003cT\u003e boolean casReflectionData(Class\u003c?\u003e clazz,\n                                             SoftReference\u003cReflectionData\u003cT\u003e\u003e oldData,\n                                             SoftReference\u003cReflectionData\u003cT\u003e\u003e newData) {\n            return unsafe.compareAndSetReference(clazz, reflectionDataOffset, oldData, newData);\n        }\n\n        static \u003cT\u003e boolean casAnnotationType(Class\u003c?\u003e clazz,\n                                             AnnotationType oldType,\n                                             AnnotationType newType) {\n            return unsafe.compareAndSetReference(clazz, annotationTypeOffset, oldType, newType);\n        }\n\n        static \u003cT\u003e boolean casAnnotationData(Class\u003c?\u003e clazz,\n                                             AnnotationData oldData,\n                                             AnnotationData newData) {\n            return unsafe.compareAndSetReference(clazz, annotationDataOffset, oldData, newData);\n        }\n    }\n\n    /**\n     * Reflection support.\n     */\n\n    // Reflection data caches various derived names and reflective members. Cached\n    // values may be invalidated when JVM TI RedefineClasses() is called\n    private static class ReflectionData\u003cT\u003e {\n        volatile Field[] declaredFields;\n        volatile Field[] publicFields;\n        volatile Method[] declaredMethods;\n        volatile Method[] publicMethods;\n        volatile Constructor\u003cT\u003e[] declaredConstructors;\n        volatile Constructor\u003cT\u003e[] publicConstructors;\n        // Intermediate results for getFields and getMethods\n        volatile Field[] declaredPublicFields;\n        volatile Method[] declaredPublicMethods;\n        volatile Class\u003c?\u003e[] interfaces;\n\n        // Cached names\n        String simpleName;\n        String canonicalName;\n        static final String NULL_SENTINEL \u003d new String();\n\n        // Value of classRedefinedCount when we created this ReflectionData instance\n        final int redefinedCount;\n\n        ReflectionData(int redefinedCount) {\n            this.redefinedCount \u003d redefinedCount;\n        }\n    }\n\n    private transient volatile SoftReference\u003cReflectionData\u003cT\u003e\u003e reflectionData;\n\n    // Incremented by the VM on each call to JVM TI RedefineClasses()\n    // that redefines this class or a superclass.\n    private transient volatile int classRedefinedCount;\n\n    // Lazily create and cache ReflectionData\n    private ReflectionData\u003cT\u003e reflectionData() {\n        SoftReference\u003cReflectionData\u003cT\u003e\u003e reflectionData \u003d this.reflectionData;\n        int classRedefinedCount \u003d this.classRedefinedCount;\n        ReflectionData\u003cT\u003e rd;\n        if (reflectionData !\u003d null \u0026\u0026\n            (rd \u003d reflectionData.get()) !\u003d null \u0026\u0026\n            rd.redefinedCount \u003d\u003d classRedefinedCount) {\n            return rd;\n        }\n        // else no SoftReference or cleared SoftReference or stale ReflectionData\n        // -\u003e create and replace new instance\n        return newReflectionData(reflectionData, classRedefinedCount);\n    }\n\n    private ReflectionData\u003cT\u003e newReflectionData(SoftReference\u003cReflectionData\u003cT\u003e\u003e oldReflectionData,\n                                                int classRedefinedCount) {\n        while (true) {\n            ReflectionData\u003cT\u003e rd \u003d new ReflectionData\u003c\u003e(classRedefinedCount);\n            // try to CAS it...\n            if (Atomic.casReflectionData(this, oldReflectionData, new SoftReference\u003c\u003e(rd))) {\n                return rd;\n            }\n            // else retry\n            oldReflectionData \u003d this.reflectionData;\n            classRedefinedCount \u003d this.classRedefinedCount;\n            if (oldReflectionData !\u003d null \u0026\u0026\n                (rd \u003d oldReflectionData.get()) !\u003d null \u0026\u0026\n                rd.redefinedCount \u003d\u003d classRedefinedCount) {\n                return rd;\n            }\n        }\n    }\n\n    // Generic signature handling\n    private native String getGenericSignature0();\n\n    // Generic info repository; lazily initialized\n    private transient volatile ClassRepository genericInfo;\n\n    // accessor for factory\n    private GenericsFactory getFactory() {\n        // create scope and factory\n        return CoreReflectionFactory.make(this, ClassScope.make(this));\n    }\n\n    // accessor for generic info repository;\n    // generic info is lazily initialized\n    private ClassRepository getGenericInfo() {\n        ClassRepository genericInfo \u003d this.genericInfo;\n        if (genericInfo \u003d\u003d null) {\n            String signature \u003d getGenericSignature0();\n            if (signature \u003d\u003d null) {\n                genericInfo \u003d ClassRepository.NONE;\n            } else {\n                genericInfo \u003d ClassRepository.make(signature, getFactory());\n            }\n            this.genericInfo \u003d genericInfo;\n        }\n        return (genericInfo !\u003d ClassRepository.NONE) ? genericInfo : null;\n    }\n\n    // Annotations handling\n    native byte[] getRawAnnotations();\n    // Since 1.8\n    native byte[] getRawTypeAnnotations();\n    static byte[] getExecutableTypeAnnotationBytes(Executable ex) {\n        return getReflectionFactory().getExecutableTypeAnnotationBytes(ex);\n    }\n\n    native ConstantPool getConstantPool();\n\n    //\n    //\n    // java.lang.reflect.Field handling\n    //\n    //\n\n    // Returns an array of \"root\" fields. These Field objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyField.\n    private Field[] privateGetDeclaredFields(boolean publicOnly) {\n        Field[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d publicOnly ? rd.declaredPublicFields : rd.declaredFields;\n            if (res !\u003d null) return res;\n        }\n        // No cached value available; request value from VM\n        res \u003d Reflection.filterFields(this, getDeclaredFields0(publicOnly));\n        if (rd !\u003d null) {\n            if (publicOnly) {\n                rd.declaredPublicFields \u003d res;\n            } else {\n                rd.declaredFields \u003d res;\n            }\n        }\n        return res;\n    }\n\n    // Returns an array of \"root\" fields. These Field objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyField.\n    private Field[] privateGetPublicFields() {\n        Field[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d rd.publicFields;\n            if (res !\u003d null) return res;\n        }\n\n        // Use a linked hash set to ensure order is preserved and\n        // fields from common super interfaces are not duplicated\n        LinkedHashSet\u003cField\u003e fields \u003d new LinkedHashSet\u003c\u003e();\n\n        // Local fields\n        addAll(fields, privateGetDeclaredFields(true));\n\n        // Direct superinterfaces, recursively\n        for (Class\u003c?\u003e si : getInterfaces()) {\n            addAll(fields, si.privateGetPublicFields());\n        }\n\n        // Direct superclass, recursively\n        Class\u003c?\u003e sc \u003d getSuperclass();\n        if (sc !\u003d null) {\n            addAll(fields, sc.privateGetPublicFields());\n        }\n\n        res \u003d fields.toArray(new Field[0]);\n        if (rd !\u003d null) {\n            rd.publicFields \u003d res;\n        }\n        return res;\n    }\n\n    private static void addAll(Collection\u003cField\u003e c, Field[] o) {\n        for (Field f : o) {\n            c.add(f);\n        }\n    }\n\n\n    //\n    //\n    // java.lang.reflect.Constructor handling\n    //\n    //\n\n    // Returns an array of \"root\" constructors. These Constructor\n    // objects must NOT be propagated to the outside world, but must\n    // instead be copied via ReflectionFactory.copyConstructor.\n    private Constructor\u003cT\u003e[] privateGetDeclaredConstructors(boolean publicOnly) {\n        Constructor\u003cT\u003e[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d publicOnly ? rd.publicConstructors : rd.declaredConstructors;\n            if (res !\u003d null) return res;\n        }\n        // No cached value available; request value from VM\n        if (isInterface()) {\n            @SuppressWarnings(\"unchecked\")\n            Constructor\u003cT\u003e[] temporaryRes \u003d (Constructor\u003cT\u003e[]) new Constructor\u003c?\u003e[0];\n            res \u003d temporaryRes;\n        } else {\n            res \u003d getDeclaredConstructors0(publicOnly);\n        }\n        if (rd !\u003d null) {\n            if (publicOnly) {\n                rd.publicConstructors \u003d res;\n            } else {\n                rd.declaredConstructors \u003d res;\n            }\n        }\n        return res;\n    }\n\n    //\n    //\n    // java.lang.reflect.Method handling\n    //\n    //\n\n    // Returns an array of \"root\" methods. These Method objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private Method[] privateGetDeclaredMethods(boolean publicOnly) {\n        Method[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d publicOnly ? rd.declaredPublicMethods : rd.declaredMethods;\n            if (res !\u003d null) return res;\n        }\n        // No cached value available; request value from VM\n        res \u003d Reflection.filterMethods(this, getDeclaredMethods0(publicOnly));\n        if (rd !\u003d null) {\n            if (publicOnly) {\n                rd.declaredPublicMethods \u003d res;\n            } else {\n                rd.declaredMethods \u003d res;\n            }\n        }\n        return res;\n    }\n\n    // Returns an array of \"root\" methods. These Method objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private Method[] privateGetPublicMethods() {\n        Method[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d rd.publicMethods;\n            if (res !\u003d null) return res;\n        }\n\n        // No cached value available; compute value recursively.\n        // Start by fetching public declared methods...\n        PublicMethods pms \u003d new PublicMethods();\n        for (Method m : privateGetDeclaredMethods(/* publicOnly */ true)) {\n            pms.merge(m);\n        }\n        // ...then recur over superclass methods...\n        Class\u003c?\u003e sc \u003d getSuperclass();\n        if (sc !\u003d null) {\n            for (Method m : sc.privateGetPublicMethods()) {\n                pms.merge(m);\n            }\n        }\n        // ...and finally over direct superinterfaces.\n        for (Class\u003c?\u003e intf : getInterfaces(/* cloneArray */ false)) {\n            for (Method m : intf.privateGetPublicMethods()) {\n                // static interface methods are not inherited\n                if (!Modifier.isStatic(m.getModifiers())) {\n                    pms.merge(m);\n                }\n            }\n        }\n\n        res \u003d pms.toArray();\n        if (rd !\u003d null) {\n            rd.publicMethods \u003d res;\n        }\n        return res;\n    }\n\n\n    //\n    // Helpers for fetchers of one field, method, or constructor\n    //\n\n    // This method does not copy the returned Field object!\n    private static Field searchFields(Field[] fields, String name) {\n        for (Field field : fields) {\n            if (field.getName().equals(name)) {\n                return field;\n            }\n        }\n        return null;\n    }\n\n    // Returns a \"root\" Field object. This Field object must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyField.\n    private Field getField0(String name) {\n        // Note: the intent is that the search algorithm this routine\n        // uses be equivalent to the ordering imposed by\n        // privateGetPublicFields(). It fetches only the declared\n        // public fields for each class, however, to reduce the number\n        // of Field objects which have to be created for the common\n        // case where the field being requested is declared in the\n        // class which is being queried.\n        Field res;\n        // Search declared public fields\n        if ((res \u003d searchFields(privateGetDeclaredFields(true), name)) !\u003d null) {\n            return res;\n        }\n        // Direct superinterfaces, recursively\n        Class\u003c?\u003e[] interfaces \u003d getInterfaces(/* cloneArray */ false);\n        for (Class\u003c?\u003e c : interfaces) {\n            if ((res \u003d c.getField0(name)) !\u003d null) {\n                return res;\n            }\n        }\n        // Direct superclass, recursively\n        if (!isInterface()) {\n            Class\u003c?\u003e c \u003d getSuperclass();\n            if (c !\u003d null) {\n                if ((res \u003d c.getField0(name)) !\u003d null) {\n                    return res;\n                }\n            }\n        }\n        return null;\n    }\n\n    // This method does not copy the returned Method object!\n    private static Method searchMethods(Method[] methods,\n                                        String name,\n                                        Class\u003c?\u003e[] parameterTypes)\n    {\n        ReflectionFactory fact \u003d getReflectionFactory();\n        Method res \u003d null;\n        for (Method m : methods) {\n            if (m.getName().equals(name)\n                \u0026\u0026 arrayContentsEq(parameterTypes,\n                                   fact.getExecutableSharedParameterTypes(m))\n                \u0026\u0026 (res \u003d\u003d null\n                    || (res.getReturnType() !\u003d m.getReturnType()\n                        \u0026\u0026 res.getReturnType().isAssignableFrom(m.getReturnType()))))\n                res \u003d m;\n        }\n        return res;\n    }\n\n    private static final Class\u003c?\u003e[] EMPTY_CLASS_ARRAY \u003d new Class\u003c?\u003e[0];\n\n    // Returns a \"root\" Method object. This Method object must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private Method getMethod0(String name, Class\u003c?\u003e[] parameterTypes) {\n        PublicMethods.MethodList res \u003d getMethodsRecursive(\n            name,\n            parameterTypes \u003d\u003d null ? EMPTY_CLASS_ARRAY : parameterTypes,\n            /* includeStatic */ true);\n        return res \u003d\u003d null ? null : res.getMostSpecific();\n    }\n\n    // Returns a list of \"root\" Method objects. These Method objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private PublicMethods.MethodList getMethodsRecursive(String name,\n                                                         Class\u003c?\u003e[] parameterTypes,\n                                                         boolean includeStatic) {\n        // 1st check declared public methods\n        Method[] methods \u003d privateGetDeclaredMethods(/* publicOnly */ true);\n        PublicMethods.MethodList res \u003d PublicMethods.MethodList\n            .filter(methods, name, parameterTypes, includeStatic);\n        // if there is at least one match among declared methods, we need not\n        // search any further as such match surely overrides matching methods\n        // declared in superclass(es) or interface(s).\n        if (res !\u003d null) {\n            return res;\n        }\n\n        // if there was no match among declared methods,\n        // we must consult the superclass (if any) recursively...\n        Class\u003c?\u003e sc \u003d getSuperclass();\n        if (sc !\u003d null) {\n            res \u003d sc.getMethodsRecursive(name, parameterTypes, includeStatic);\n        }\n\n        // ...and coalesce the superclass methods with methods obtained\n        // from directly implemented interfaces excluding static methods...\n        for (Class\u003c?\u003e intf : getInterfaces(/* cloneArray */ false)) {\n            res \u003d PublicMethods.MethodList.merge(\n                res, intf.getMethodsRecursive(name, parameterTypes,\n                                              /* includeStatic */ false));\n        }\n\n        return res;\n    }\n\n    // Returns a \"root\" Constructor object. This Constructor object must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyConstructor.\n    private Constructor\u003cT\u003e getConstructor0(Class\u003c?\u003e[] parameterTypes,\n                                        int which) throws NoSuchMethodException\n    {\n        ReflectionFactory fact \u003d getReflectionFactory();\n        Constructor\u003cT\u003e[] constructors \u003d privateGetDeclaredConstructors((which \u003d\u003d Member.PUBLIC));\n        for (Constructor\u003cT\u003e constructor : constructors) {\n            if (arrayContentsEq(parameterTypes,\n                                fact.getExecutableSharedParameterTypes(constructor))) {\n                return constructor;\n            }\n        }\n        throw new NoSuchMethodException(methodToString(\"\u003cinit\u003e\", parameterTypes));\n    }\n\n    //\n    // Other helpers and base implementation\n    //\n\n    private static boolean arrayContentsEq(Object[] a1, Object[] a2) {\n        if (a1 \u003d\u003d null) {\n            return a2 \u003d\u003d null || a2.length \u003d\u003d 0;\n        }\n\n        if (a2 \u003d\u003d null) {\n            return a1.length \u003d\u003d 0;\n        }\n\n        if (a1.length !\u003d a2.length) {\n            return false;\n        }\n\n        for (int i \u003d 0; i \u003c a1.length; i++) {\n            if (a1[i] !\u003d a2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private static Field[] copyFields(Field[] arg) {\n        Field[] out \u003d new Field[arg.length];\n        ReflectionFactory fact \u003d getReflectionFactory();\n        for (int i \u003d 0; i \u003c arg.length; i++) {\n            out[i] \u003d fact.copyField(arg[i]);\n        }\n        return out;\n    }\n\n    private static Method[] copyMethods(Method[] arg) {\n        Method[] out \u003d new Method[arg.length];\n        ReflectionFactory fact \u003d getReflectionFactory();\n        for (int i \u003d 0; i \u003c arg.length; i++) {\n            out[i] \u003d fact.copyMethod(arg[i]);\n        }\n        return out;\n    }\n\n    private static \u003cU\u003e Constructor\u003cU\u003e[] copyConstructors(Constructor\u003cU\u003e[] arg) {\n        Constructor\u003cU\u003e[] out \u003d arg.clone();\n        ReflectionFactory fact \u003d getReflectionFactory();\n        for (int i \u003d 0; i \u003c out.length; i++) {\n            out[i] \u003d fact.copyConstructor(out[i]);\n        }\n        return out;\n    }\n\n    private native Field[]       getDeclaredFields0(boolean publicOnly);\n    private native Method[]      getDeclaredMethods0(boolean publicOnly);\n    private native Constructor\u003cT\u003e[] getDeclaredConstructors0(boolean publicOnly);\n    private native Class\u003c?\u003e[]    getDeclaredClasses0();\n\n    /*\n     * Returns an array containing the components of the Record attribute,\n     * or null if the attribute is not present.\n     *\n     * Note that this method returns non-null array on a class with\n     * the Record attribute even if this class is not a record.\n     */\n    private native RecordComponent[] getRecordComponents0();\n    private native boolean       isRecord0();\n\n    /**\n     * Helper method to get the method name from arguments.\n     */\n    private String methodToString(String name, Class\u003c?\u003e[] argTypes) {\n        return getName() + \u0027.\u0027 + name +\n                ((argTypes \u003d\u003d null || argTypes.length \u003d\u003d 0) ?\n                \"()\" :\n                Arrays.stream(argTypes)\n                        .map(c -\u003e c \u003d\u003d null ? \"null\" : c.getName())\n                        .collect(Collectors.joining(\",\", \"(\", \")\")));\n    }\n\n    /** use serialVersionUID from JDK 1.1 for interoperability */\n    @java.io.Serial\n    private static final long serialVersionUID \u003d 3206093459760846163L;\n\n\n    /**\n     * Class Class is special cased within the Serialization Stream Protocol.\n     *\n     * A Class instance is written initially into an ObjectOutputStream in the\n     * following format:\n     * \u003cpre\u003e\n     *      {@code TC_CLASS} ClassDescriptor\n     *      A ClassDescriptor is a special cased serialization of\n     *      a {@code java.io.ObjectStreamClass} instance.\n     * \u003c/pre\u003e\n     * A new handle is generated for the initial time the class descriptor\n     * is written into the stream. Future references to the class descriptor\n     * are written as references to the initial class descriptor instance.\n     *\n     * @see java.io.ObjectStreamClass\n     */\n    @java.io.Serial\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n\n    /**\n     * Returns the assertion status that would be assigned to this\n     * class if it were to be initialized at the time this method is invoked.\n     * If this class has had its assertion status set, the most recent\n     * setting will be returned; otherwise, if any package default assertion\n     * status pertains to this class, the most recent setting for the most\n     * specific pertinent package default assertion status is returned;\n     * otherwise, if this class is not a system class (i.e., it has a\n     * class loader) its class loader\u0027s default assertion status is returned;\n     * otherwise, the system class default assertion status is returned.\n     *\n     * @apiNote\n     * Few programmers will have any need for this method; it is provided\n     * for the benefit of the JDK itself.  (It allows a class to determine at\n     * the time that it is initialized whether assertions should be enabled.)\n     * Note that this method is not guaranteed to return the actual\n     * assertion status that was (or will be) associated with the specified\n     * class when it was (or will be) initialized.\n     *\n     * @return the desired assertion status of the specified class.\n     * @see    java.lang.ClassLoader#setClassAssertionStatus\n     * @see    java.lang.ClassLoader#setPackageAssertionStatus\n     * @see    java.lang.ClassLoader#setDefaultAssertionStatus\n     * @since  1.4\n     */\n    public boolean desiredAssertionStatus() {\n        ClassLoader loader \u003d getClassLoader0();\n        // If the loader is null this is a system class, so ask the VM\n        if (loader \u003d\u003d null)\n            return desiredAssertionStatus0(this);\n\n        // If the classloader has been initialized with the assertion\n        // directives, ask it. Otherwise, ask the VM.\n        synchronized(loader.assertionLock) {\n            if (loader.classAssertionStatus !\u003d null) {\n                return loader.desiredAssertionStatus(getName());\n            }\n        }\n        return desiredAssertionStatus0(this);\n    }\n\n    // Retrieves the desired assertion status of this class from the VM\n    private static native boolean desiredAssertionStatus0(Class\u003c?\u003e clazz);\n\n    /**\n     * Returns true if and only if this class was declared as an enum in the\n     * source code.\n     *\n     * Note that {@link java.lang.Enum} is not itself an enum class.\n     *\n     * Also note that if an enum constant is declared with a class body,\n     * the class of that enum constant object is an anonymous class\n     * and \u003cem\u003enot\u003c/em\u003e the class of the declaring enum class. The\n     * {@link Enum#getDeclaringClass} method of an enum constant can\n     * be used to get the class of the enum class declaring the\n     * constant.\n     *\n     * @return true if and only if this class was declared as an enum in the\n     *     source code\n     * @since 1.5\n     * @jls 8.9.1 Enum Constants\n     */\n    public boolean isEnum() {\n        // An enum must both directly extend java.lang.Enum and have\n        // the ENUM bit set; classes for specialized enum constants\n        // don\u0027t do the former.\n        return (this.getModifiers() \u0026 ENUM) !\u003d 0 \u0026\u0026\n        this.getSuperclass() \u003d\u003d java.lang.Enum.class;\n    }\n\n    /**\n     * Returns {@code true} if and only if this class is a record class.\n     *\n     * \u003cp\u003e The {@linkplain #getSuperclass() direct superclass} of a record\n     * class is {@code java.lang.Record}. A record class is {@linkplain\n     * Modifier#FINAL final}. A record class has (possibly zero) record\n     * components; {@link #getRecordComponents()} returns a non-null but\n     * possibly empty value for a record.\n     *\n     * \u003cp\u003e Note that class {@link Record} is not a record class and thus\n     * invoking this method on class {@code Record} returns {@code false}.\n     *\n     * @return true if and only if this class is a record class, otherwise false\n     * @jls 8.10 Record Classes\n     * @since 16\n     */\n    public boolean isRecord() {\n        // this superclass and final modifier check is not strictly necessary\n        // they are intrinsified and serve as a fast-path check\n        return getSuperclass() \u003d\u003d java.lang.Record.class \u0026\u0026\n                (this.getModifiers() \u0026 Modifier.FINAL) !\u003d 0 \u0026\u0026\n                isRecord0();\n    }\n\n    // Fetches the factory for reflective objects\n    private static ReflectionFactory getReflectionFactory() {\n        if (reflectionFactory \u003d\u003d null) {\n            reflectionFactory \u003d\n                java.security.AccessController.doPrivileged\n                    (new ReflectionFactory.GetReflectionFactoryAction());\n        }\n        return reflectionFactory;\n    }\n    private static ReflectionFactory reflectionFactory;\n\n    /**\n     * Returns the elements of this enum class or null if this\n     * Class object does not represent an enum class.\n     *\n     * @return an array containing the values comprising the enum class\n     *     represented by this {@code Class} object in the order they\u0027re\n     *     declared, or null if this {@code Class} object does not\n     *     represent an enum class\n     * @since 1.5\n     */\n    public T[] getEnumConstants() {\n        T[] values \u003d getEnumConstantsShared();\n        return (values !\u003d null) ? values.clone() : null;\n    }\n\n    /**\n     * Returns the elements of this enum class or null if this\n     * Class object does not represent an enum class;\n     * identical to getEnumConstants except that the result is\n     * uncloned, cached, and shared by all callers.\n     */\n    T[] getEnumConstantsShared() {\n        T[] constants \u003d enumConstants;\n        if (constants \u003d\u003d null) {\n            if (!isEnum()) return null;\n            try {\n                final Method values \u003d getMethod(\"values\");\n                java.security.AccessController.doPrivileged(\n                    new java.security.PrivilegedAction\u003c\u003e() {\n                        public Void run() {\n                                values.setAccessible(true);\n                                return null;\n                            }\n                        });\n                @SuppressWarnings(\"unchecked\")\n                T[] temporaryConstants \u003d (T[])values.invoke(null);\n                enumConstants \u003d constants \u003d temporaryConstants;\n            }\n            // These can happen when users concoct enum-like classes\n            // that don\u0027t comply with the enum spec.\n            catch (InvocationTargetException | NoSuchMethodException |\n                   IllegalAccessException ex) { return null; }\n        }\n        return constants;\n    }\n    private transient volatile T[] enumConstants;\n\n    /**\n     * Returns a map from simple name to enum constant.  This package-private\n     * method is used internally by Enum to implement\n     * {@code public static \u003cT extends Enum\u003cT\u003e\u003e T valueOf(Class\u003cT\u003e, String)}\n     * efficiently.  Note that the map is returned by this method is\n     * created lazily on first use.  Typically it won\u0027t ever get created.\n     */\n    Map\u003cString, T\u003e enumConstantDirectory() {\n        Map\u003cString, T\u003e directory \u003d enumConstantDirectory;\n        if (directory \u003d\u003d null) {\n            T[] universe \u003d getEnumConstantsShared();\n            if (universe \u003d\u003d null)\n                throw new IllegalArgumentException(\n                    getName() + \" is not an enum class\");\n            directory \u003d new HashMap\u003c\u003e((int)(universe.length / 0.75f) + 1);\n            for (T constant : universe) {\n                directory.put(((Enum\u003c?\u003e)constant).name(), constant);\n            }\n            enumConstantDirectory \u003d directory;\n        }\n        return directory;\n    }\n    private transient volatile Map\u003cString, T\u003e enumConstantDirectory;\n\n    /**\n     * Casts an object to the class or interface represented\n     * by this {@code Class} object.\n     *\n     * @param obj the object to be cast\n     * @return the object after casting, or null if obj is null\n     *\n     * @throws ClassCastException if the object is not\n     * null and is not assignable to the type T.\n     *\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    @IntrinsicCandidate\n    public T cast(Object obj) {\n        if (obj !\u003d null \u0026\u0026 !isInstance(obj))\n            throw new ClassCastException(cannotCastMsg(obj));\n        return (T) obj;\n    }\n\n    private String cannotCastMsg(Object obj) {\n        return \"Cannot cast \" + obj.getClass().getName() + \" to \" + getName();\n    }\n\n    /**\n     * Casts this {@code Class} object to represent a subclass of the class\n     * represented by the specified class object.  Checks that the cast\n     * is valid, and throws a {@code ClassCastException} if it is not.  If\n     * this method succeeds, it always returns a reference to this {@code Class} object.\n     *\n     * \u003cp\u003eThis method is useful when a client needs to \"narrow\" the type of\n     * a {@code Class} object to pass it to an API that restricts the\n     * {@code Class} objects that it is willing to accept.  A cast would\n     * generate a compile-time warning, as the correctness of the cast\n     * could not be checked at runtime (because generic types are implemented\n     * by erasure).\n     *\n     * @param \u003cU\u003e the type to cast this {@code Class} object to\n     * @param clazz the class of the type to cast this {@code Class} object to\n     * @return this {@code Class} object, cast to represent a subclass of\n     *    the specified class object.\n     * @throws ClassCastException if this {@code Class} object does not\n     *    represent a subclass of the specified class (here \"subclass\" includes\n     *    the class itself).\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    public \u003cU\u003e Class\u003c? extends U\u003e asSubclass(Class\u003cU\u003e clazz) {\n        if (clazz.isAssignableFrom(this))\n            return (Class\u003c? extends U\u003e) this;\n        else\n            throw new ClassCastException(this.toString());\n    }\n\n    /**\n     * {@inheritDoc}\n     * \u003cp\u003eNote that any annotation returned by this method is a\n     * declaration annotation.\n     *\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     */\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public \u003cA extends Annotation\u003e A getAnnotation(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return (A) annotationData().annotations.get(annotationClass);\n    }\n\n    /**\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     */\n    @Override\n    public boolean isAnnotationPresent(Class\u003c? extends Annotation\u003e annotationClass) {\n        return GenericDeclaration.super.isAnnotationPresent(annotationClass);\n    }\n\n    /**\n     * {@inheritDoc}\n     * \u003cp\u003eNote that any annotations returned by this method are\n     * declaration annotations.\n     *\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    public \u003cA extends Annotation\u003e A[] getAnnotationsByType(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        AnnotationData annotationData \u003d annotationData();\n        return AnnotationSupport.getAssociatedAnnotations(annotationData.declaredAnnotations,\n                                                          this,\n                                                          annotationClass);\n    }\n\n    /**\n     * {@inheritDoc}\n     * \u003cp\u003eNote that any annotations returned by this method are\n     * declaration annotations.\n     *\n     * @since 1.5\n     */\n    @Override\n    public Annotation[] getAnnotations() {\n        return AnnotationParser.toArray(annotationData().annotations);\n    }\n\n    /**\n     * {@inheritDoc}\n     * \u003cp\u003eNote that any annotation returned by this method is a\n     * declaration annotation.\n     *\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public \u003cA extends Annotation\u003e A getDeclaredAnnotation(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return (A) annotationData().declaredAnnotations.get(annotationClass);\n    }\n\n    /**\n     * {@inheritDoc}\n     * \u003cp\u003eNote that any annotations returned by this method are\n     * declaration annotations.\n     *\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    public \u003cA extends Annotation\u003e A[] getDeclaredAnnotationsByType(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return AnnotationSupport.getDirectlyAndIndirectlyPresent(annotationData().declaredAnnotations,\n                                                                 annotationClass);\n    }\n\n    /**\n     * {@inheritDoc}\n     * \u003cp\u003eNote that any annotations returned by this method are\n     * declaration annotations.\n     *\n     * @since 1.5\n     */\n    @Override\n    public Annotation[] getDeclaredAnnotations()  {\n        return AnnotationParser.toArray(annotationData().declaredAnnotations);\n    }\n\n    // annotation data that might get invalidated when JVM TI RedefineClasses() is called\n    private static class AnnotationData {\n        final Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e annotations;\n        final Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e declaredAnnotations;\n\n        // Value of classRedefinedCount when we created this AnnotationData instance\n        final int redefinedCount;\n\n        AnnotationData(Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e annotations,\n                       Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e declaredAnnotations,\n                       int redefinedCount) {\n            this.annotations \u003d annotations;\n            this.declaredAnnotations \u003d declaredAnnotations;\n            this.redefinedCount \u003d redefinedCount;\n        }\n    }\n\n    // Annotations cache\n    @SuppressWarnings(\"UnusedDeclaration\")\n    private transient volatile AnnotationData annotationData;\n\n    private AnnotationData annotationData() {\n        while (true) { // retry loop\n            AnnotationData annotationData \u003d this.annotationData;\n            int classRedefinedCount \u003d this.classRedefinedCount;\n            if (annotationData !\u003d null \u0026\u0026\n                annotationData.redefinedCount \u003d\u003d classRedefinedCount) {\n                return annotationData;\n            }\n            // null or stale annotationData -\u003e optimistically create new instance\n            AnnotationData newAnnotationData \u003d createAnnotationData(classRedefinedCount);\n            // try to install it\n            if (Atomic.casAnnotationData(this, annotationData, newAnnotationData)) {\n                // successfully installed new AnnotationData\n                return newAnnotationData;\n            }\n        }\n    }\n\n    private AnnotationData createAnnotationData(int classRedefinedCount) {\n        Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e declaredAnnotations \u003d\n            AnnotationParser.parseAnnotations(getRawAnnotations(), getConstantPool(), this);\n        Class\u003c?\u003e superClass \u003d getSuperclass();\n        Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e annotations \u003d null;\n        if (superClass !\u003d null) {\n            Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e superAnnotations \u003d\n                superClass.annotationData().annotations;\n            for (Map.Entry\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e e : superAnnotations.entrySet()) {\n                Class\u003c? extends Annotation\u003e annotationClass \u003d e.getKey();\n                if (AnnotationType.getInstance(annotationClass).isInherited()) {\n                    if (annotations \u003d\u003d null) { // lazy construction\n                        annotations \u003d new LinkedHashMap\u003c\u003e((Math.max(\n                                declaredAnnotations.size(),\n                                Math.min(12, declaredAnnotations.size() + superAnnotations.size())\n                            ) * 4 + 2) / 3\n                        );\n                    }\n                    annotations.put(annotationClass, e.getValue());\n                }\n            }\n        }\n        if (annotations \u003d\u003d null) {\n            // no inherited annotations -\u003e share the Map with declaredAnnotations\n            annotations \u003d declaredAnnotations;\n        } else {\n            // at least one inherited annotation -\u003e declared may override inherited\n            annotations.putAll(declaredAnnotations);\n        }\n        return new AnnotationData(annotations, declaredAnnotations, classRedefinedCount);\n    }\n\n    // Annotation interfaces cache their internal (AnnotationType) form\n\n    @SuppressWarnings(\"UnusedDeclaration\")\n    private transient volatile AnnotationType annotationType;\n\n    boolean casAnnotationType(AnnotationType oldType, AnnotationType newType) {\n        return Atomic.casAnnotationType(this, oldType, newType);\n    }\n\n    AnnotationType getAnnotationType() {\n        return annotationType;\n    }\n\n    Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e getDeclaredAnnotationMap() {\n        return annotationData().declaredAnnotations;\n    }\n\n    /* Backing store of user-defined values pertaining to this class.\n     * Maintained by the ClassValue class.\n     */\n    transient ClassValue.ClassValueMap classValueMap;\n\n    /**\n     * Returns an {@code AnnotatedType} object that represents the use of a\n     * type to specify the superclass of the entity represented by this {@code\n     * Class} object. (The \u003cem\u003euse\u003c/em\u003e of type Foo to specify the superclass\n     * in \u0027...  extends Foo\u0027 is distinct from the \u003cem\u003edeclaration\u003c/em\u003e of class\n     * Foo.)\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class whose declaration\n     * does not explicitly indicate an annotated superclass, then the return\n     * value is an {@code AnnotatedType} object representing an element with no\n     * annotations.\n     *\n     * \u003cp\u003e If this {@code Class} represents either the {@code Object} class, an\n     * interface type, an array type, a primitive type, or void, the return\n     * value is {@code null}.\n     *\n     * @return an object representing the superclass\n     * @since 1.8\n     */\n    public AnnotatedType getAnnotatedSuperclass() {\n        if (this \u003d\u003d Object.class ||\n                isInterface() ||\n                isArray() ||\n                isPrimitive() ||\n                this \u003d\u003d Void.TYPE) {\n            return null;\n        }\n\n        return TypeAnnotationParser.buildAnnotatedSuperclass(getRawTypeAnnotations(), getConstantPool(), this);\n    }\n\n    /**\n     * Returns an array of {@code AnnotatedType} objects that represent the use\n     * of types to specify superinterfaces of the entity represented by this\n     * {@code Class} object. (The \u003cem\u003euse\u003c/em\u003e of type Foo to specify a\n     * superinterface in \u0027... implements Foo\u0027 is distinct from the\n     * \u003cem\u003edeclaration\u003c/em\u003e of interface Foo.)\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class, the return value is\n     * an array containing objects representing the uses of interface types to\n     * specify interfaces implemented by the class. The order of the objects in\n     * the array corresponds to the order of the interface types used in the\n     * \u0027implements\u0027 clause of the declaration of this {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface, the return\n     * value is an array containing objects representing the uses of interface\n     * types to specify interfaces directly extended by the interface. The\n     * order of the objects in the array corresponds to the order of the\n     * interface types used in the \u0027extends\u0027 clause of the declaration of this\n     * {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface whose\n     * declaration does not explicitly indicate any annotated superinterfaces,\n     * the return value is an array of length 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents either the {@code Object}\n     * class, an array type, a primitive type, or void, the return value is an\n     * array of length 0.\n     *\n     * @return an array representing the superinterfaces\n     * @since 1.8\n     */\n    public AnnotatedType[] getAnnotatedInterfaces() {\n         return TypeAnnotationParser.buildAnnotatedInterfaces(getRawTypeAnnotations(), getConstantPool(), this);\n    }\n\n    private native Class\u003c?\u003e getNestHost0();\n\n    /**\n     * Returns the nest host of the \u003ca href\u003d#nest\u003enest\u003c/a\u003e to which the class\n     * or interface represented by this {@code Class} object belongs.\n     * Every class and interface belongs to exactly one nest.\n     *\n     * If the nest host of this class or interface has previously\n     * been determined, then this method returns the nest host.\n     * If the nest host of this class or interface has\n     * not previously been determined, then this method determines the nest\n     * host using the algorithm of JVMS 5.4.4, and returns it.\n     *\n     * Often, a class or interface belongs to a nest consisting only of itself,\n     * in which case this method returns {@code this} to indicate that the class\n     * or interface is the nest host.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents a primitive type, an array type,\n     * or {@code void}, then this method returns {@code this},\n     * indicating that the represented entity belongs to the nest consisting only of\n     * itself, and is the nest host.\n     *\n     * @return the nest host of this class or interface\n     *\n     * @throws SecurityException\n     *         If the returned class is not the current class, and\n     *         if a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *         class loader is not the same as or an ancestor of the class\n     *         loader for the returned class and invocation of {@link\n     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *         denies access to the package of the returned class\n     * @since 11\n     * @jvms 4.7.28 The {@code NestHost} Attribute\n     * @jvms 4.7.29 The {@code NestMembers} Attribute\n     * @jvms 5.4.4 Access Control\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e getNestHost() {\n        if (isPrimitive() || isArray()) {\n            return this;\n        }\n\n        Class\u003c?\u003e host \u003d getNestHost0();\n        if (host \u003d\u003d this) {\n            return this;\n        }\n        // returning a different class requires a security check\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkPackageAccess(sm,\n                               ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n        }\n        return host;\n    }\n\n    /**\n     * Determines if the given {@code Class} is a nestmate of the\n     * class or interface represented by this {@code Class} object.\n     * Two classes or interfaces are nestmates\n     * if they have the same {@linkplain #getNestHost() nest host}.\n     *\n     * @param c the class to check\n     * @return {@code true} if this class and {@code c} are members of\n     * the same nest; and {@code false} otherwise.\n     *\n     * @since 11\n     */\n    public boolean isNestmateOf(Class\u003c?\u003e c) {\n        if (this \u003d\u003d c) {\n            return true;\n        }\n        if (isPrimitive() || isArray() ||\n            c.isPrimitive() || c.isArray()) {\n            return false;\n        }\n\n        return getNestHost() \u003d\u003d c.getNestHost();\n    }\n\n    private native Class\u003c?\u003e[] getNestMembers0();\n\n    /**\n     * Returns an array containing {@code Class} objects representing all the\n     * classes and interfaces that are members of the nest to which the class\n     * or interface represented by this {@code Class} object belongs.\n     *\n     * First, this method obtains the {@linkplain #getNestHost() nest host},\n     * {@code H}, of the nest to which the class or interface represented by\n     * this {@code Class} object belongs. The zeroth element of the returned\n     * array is {@code H}.\n     *\n     * Then, for each class or interface {@code C} which is recorded by {@code H}\n     * as being a member of its nest, this method attempts to obtain the {@code Class}\n     * object for {@code C} (using {@linkplain #getClassLoader() the defining class\n     * loader} of the current {@code Class} object), and then obtains the\n     * {@linkplain #getNestHost() nest host} of the nest to which {@code C} belongs.\n     * The classes and interfaces which are recorded by {@code H} as being members\n     * of its nest, and for which {@code H} can be determined as their nest host,\n     * are indicated by subsequent elements of the returned array. The order of\n     * such elements is unspecified. Duplicates are permitted.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents a primitive type, an array type,\n     * or {@code void}, then this method returns a single-element array containing\n     * {@code this}.\n     *\n     * @apiNote\n     * The returned array includes only the nest members recorded in the {@code NestMembers}\n     * attribute, and not any hidden classes that were added to the nest via\n     * {@link MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)\n     * Lookup::defineHiddenClass}.\n     *\n     * @return an array of all classes and interfaces in the same nest as\n     * this class or interface\n     *\n     * @throws SecurityException\n     * If any returned class is not the current class, and\n     * if a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     * class loader is not the same as or an ancestor of the class\n     * loader for that returned class and invocation of {@link\n     * SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     * denies access to the package of that returned class\n     *\n     * @since 11\n     * @see #getNestHost()\n     * @jvms 4.7.28 The {@code NestHost} Attribute\n     * @jvms 4.7.29 The {@code NestMembers} Attribute\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e[] getNestMembers() {\n        if (isPrimitive() || isArray()) {\n            return new Class\u003c?\u003e[] { this };\n        }\n        Class\u003c?\u003e[] members \u003d getNestMembers0();\n        // Can\u0027t actually enable this due to bootstrapping issues\n        // assert(members.length !\u003d 1 || members[0] \u003d\u003d this); // expected invariant from VM\n\n        if (members.length \u003e 1) {\n            // If we return anything other than the current class we need\n            // a security check\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                checkPackageAccess(sm,\n                                   ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n            }\n        }\n        return members;\n    }\n\n    /**\n     * Returns the descriptor string of the entity (class, interface, array class,\n     * primitive type, or {@code void}) represented by this {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface,\n     * not an array class, then:\n     * \u003cul\u003e\n     * \u003cli\u003e If the class or interface is not {@linkplain Class#isHidden() hidden},\n     *      then the result is a field descriptor (JVMS {@jvms 4.3.2})\n     *      for the class or interface. Calling\n     *      {@link ClassDesc#ofDescriptor(String) ClassDesc::ofDescriptor}\n     *      with the result descriptor string produces a {@link ClassDesc ClassDesc}\n     *      describing this class or interface.\n     * \u003cli\u003e If the class or interface is {@linkplain Class#isHidden() hidden},\n     *      then the result is a string of the form:\n     *      \u003cblockquote\u003e\n     *      {@code \"L\" +} \u003cem\u003eN\u003c/em\u003e {@code + \".\" + \u003csuffix\u003e + \";\"}\n     *      \u003c/blockquote\u003e\n     *      where \u003cem\u003eN\u003c/em\u003e is the \u003ca href\u003d\"ClassLoader.html#binary-name\"\u003ebinary name\u003c/a\u003e\n     *      encoded in internal form indicated by the {@code class} file passed to\n     *      {@link MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)\n     *      Lookup::defineHiddenClass}, and {@code \u003csuffix\u003e} is an unqualified name.\n     *      A hidden class or interface has no {@linkplain ClassDesc nominal descriptor}.\n     *      The result string is not a type descriptor.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array class, then\n     * the result is a string consisting of one or more \u0027{@code [}\u0027 characters\n     * representing the depth of the array nesting, followed by the\n     * descriptor string of the element type.\n     * \u003cul\u003e\n     * \u003cli\u003e If the element type is not a {@linkplain Class#isHidden() hidden} class\n     * or interface, then this array class can be described nominally.\n     * Calling {@link ClassDesc#ofDescriptor(String) ClassDesc::ofDescriptor}\n     * with the result descriptor string produces a {@link ClassDesc ClassDesc}\n     * describing this array class.\n     * \u003cli\u003e If the element type is a {@linkplain Class#isHidden() hidden} class or\n     * interface, then this array class cannot be described nominally.\n     * The result string is not a type descriptor.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e If this {@code Class} object represents a primitive type or\n     * {@code void}, then the result is a field descriptor string which\n     * is a one-letter code corresponding to a primitive type or {@code void}\n     * ({@code \"B\", \"C\", \"D\", \"F\", \"I\", \"J\", \"S\", \"Z\", \"V\"}) (JVMS {@jvms 4.3.2}).\n     *\n     * @apiNote\n     * This is not a strict inverse of {@link #forName};\n     * distinct classes which share a common name but have different class loaders\n     * will have identical descriptor strings.\n     *\n     * @return the descriptor string for this {@code Class} object\n     * @jvms 4.3.2 Field Descriptors\n     * @since 12\n     */\n    @Override\n    public String descriptorString() {\n        if (isPrimitive())\n            return Wrapper.forPrimitiveType(this).basicTypeString();\n\n        if (isArray()) {\n            return \"[\" + componentType.descriptorString();\n        } else if (isHidden()) {\n            String name \u003d getName();\n            int index \u003d name.indexOf(\u0027/\u0027);\n            return \"L\" + name.substring(0, index).replace(\u0027.\u0027, \u0027/\u0027)\n                       + \".\" + name.substring(index+1) + \";\";\n        } else {\n            return \"L\" + getName().replace(\u0027.\u0027, \u0027/\u0027) + \";\";\n        }\n    }\n\n    /**\n     * Returns the component type of this {@code Class}, if it describes\n     * an array type, or {@code null} otherwise.\n     *\n     * @implSpec\n     * Equivalent to {@link Class#getComponentType()}.\n     *\n     * @return a {@code Class} describing the component type, or {@code null}\n     * if this {@code Class} does not describe an array type\n     * @since 12\n     */\n    @Override\n    public Class\u003c?\u003e componentType() {\n        return isArray() ? componentType : null;\n    }\n\n    /**\n     * Returns a {@code Class} for an array type whose component type\n     * is described by this {@linkplain Class}.\n     *\n     * @return a {@code Class} describing the array type\n     * @since 12\n     */\n    @Override\n    public Class\u003c?\u003e arrayType() {\n        return Array.newInstance(this, 0).getClass();\n    }\n\n    /**\n     * Returns a nominal descriptor for this instance, if one can be\n     * constructed, or an empty {@link Optional} if one cannot be.\n     *\n     * @return An {@link Optional} containing the resulting nominal descriptor,\n     * or an empty {@link Optional} if one cannot be constructed.\n     * @since 12\n     */\n    @Override\n    public Optional\u003cClassDesc\u003e describeConstable() {\n        Class\u003c?\u003e c \u003d isArray() ? elementType() : this;\n        return c.isHidden() ? Optional.empty()\n                            : Optional.of(ClassDesc.ofDescriptor(descriptorString()));\n   }\n\n    /**\n     * Returns {@code true} if and only if the underlying class is a hidden class.\n     *\n     * @return {@code true} if and only if this class is a hidden class.\n     *\n     * @since 15\n     * @see MethodHandles.Lookup#defineHiddenClass\n     */\n    @IntrinsicCandidate\n    public native boolean isHidden();\n\n    /**\n     * {@preview Associated with sealed classes, a preview feature of the Java language.\n     *\n     *           This method is associated with \u003ci\u003esealed classes\u003c/i\u003e, a preview\n     *           feature of the Java language. Preview features\n     *           may be removed in a future release, or upgraded to permanent\n     *           features of the Java language.}\n     *\n     * Returns an array containing {@code Class} objects representing the\n     * direct subinterfaces or subclasses permitted to extend or\n     * implement this class or interface if it is sealed.  The order of such elements\n     * is unspecified. The array is empty if this sealed class or interface has no\n     * permitted subclass. If this {@code Class} object represents a primitive type,\n     * {@code void}, an array type, or a class or interface that is not sealed,\n     * that is {@link #isSealed()} returns {@code false}, then this method returns {@code null}.\n     * Conversely, if {@link #isSealed()} returns {@code true}, then this method\n     * returns a non-null value.\n     *\n     * For each class or interface {@code C} which is recorded as a permitted\n     * direct subinterface or subclass of this class or interface,\n     * this method attempts to obtain the {@code Class}\n     * object for {@code C} (using {@linkplain #getClassLoader() the defining class\n     * loader} of the current {@code Class} object).\n     * The {@code Class} objects which can be obtained and which are direct\n     * subinterfaces or subclasses of this class or interface,\n     * are indicated by elements of the returned array. If a {@code Class} object\n     * cannot be obtained, it is silently ignored, and not included in the result\n     * array.\n     *\n     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface,\n     *         or {@code null} if this class or interface is not sealed.\n     *\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *         class loader is not the same as or an ancestor of the class\n     *         loader for that returned class and invocation of {@link\n     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *         denies access to the package of any class in the returned array.\n     *\n     * @jls 8.1 Class Declarations\n     * @jls 9.1 Interface Declarations\n     * @since 15\n     */\n    @jdk.internal.PreviewFeature(feature\u003djdk.internal.PreviewFeature.Feature.SEALED_CLASSES, essentialAPI\u003dfalse)\n    @CallerSensitive\n    public Class\u003c?\u003e[] getPermittedSubclasses() {\n        Class\u003c?\u003e[] subClasses;\n        if (isArray() || isPrimitive() || (subClasses \u003d getPermittedSubclasses0()) \u003d\u003d null) {\n            return null;\n        }\n        if (subClasses.length \u003e 0) {\n            if (Arrays.stream(subClasses).anyMatch(c -\u003e !isDirectSubType(c))) {\n                subClasses \u003d Arrays.stream(subClasses)\n                                   .filter(this::isDirectSubType)\n                                   .toArray(s -\u003e new Class\u003c?\u003e[s]);\n            }\n        }\n        if (subClasses.length \u003e 0) {\n            // If we return some classes we need a security check:\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                checkPackageAccessForPermittedSubclasses(sm,\n                                             ClassLoader.getClassLoader(Reflection.getCallerClass()),\n                                             subClasses);\n            }\n        }\n        return subClasses;\n    }\n\n    private boolean isDirectSubType(Class\u003c?\u003e c) {\n        if (isInterface()) {\n            for (Class\u003c?\u003e i : c.getInterfaces(/* cloneArray */ false)) {\n                if (i \u003d\u003d this) {\n                    return true;\n                }\n            }\n        } else {\n            return c.getSuperclass() \u003d\u003d this;\n        }\n        return false;\n    }\n\n    /**\n     * {@preview Associated with sealed classes, a preview feature of the Java language.\n     *\n     *           This method is associated with \u003ci\u003esealed classes\u003c/i\u003e, a preview\n     *           feature of the Java language. Preview features\n     *           may be removed in a future release, or upgraded to permanent\n     *           features of the Java language.}\n     *\n     * Returns {@code true} if and only if this {@code Class} object represents\n     * a sealed class or interface. If this {@code Class} object represents a\n     * primitive type, {@code void}, or an array type, this method returns\n     * {@code false}. A sealed class or interface has (possibly zero) permitted\n     * subclasses; {@link #getPermittedSubclasses()} returns a non-null but\n     * possibly empty value for a sealed class or interface.\n     *\n     * @return {@code true} if and only if this {@code Class} object represents a sealed class or interface.\n     *\n     * @jls 8.1 Class Declarations\n     * @jls 9.1 Interface Declarations\n     * @since 15\n     */\n    @jdk.internal.PreviewFeature(feature\u003djdk.internal.PreviewFeature.Feature.SEALED_CLASSES, essentialAPI\u003dfalse)\n    @SuppressWarnings(\"preview\")\n    public boolean isSealed() {\n        if (isArray() || isPrimitive()) {\n            return false;\n        }\n        return getPermittedSubclasses() !\u003d null;\n    }\n\n    private native Class\u003c?\u003e[] getPermittedSubclasses0();\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-16.0.1/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:137)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:135)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:622)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:619)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:1047)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-16.0.1/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2966)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3137)
	at java.base/java.net.URI$Parser.parse(URI.java:3173)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 21 more

Jul 11, 2022 9:19:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-16.0.1/lib/src.zip%21/java.base/java/lang/Class.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-16.0.1/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:906)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:137)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:135)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:622)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:619)
	at scala.meta.internal.metals.MetalsLanguageServer.didClose(MetalsLanguageServer.scala:1216)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-16.0.1/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2966)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3137)
	at java.base/java.net.URI$Parser.parse(URI.java:3173)
	at java.base/java.net.URI.<init>(URI.java:623)
	at java.base/java.net.URI.create(URI.java:904)
	... 21 more

2022.07.11 09:56:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.11 09:56:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
Jul 11, 2022 9:56:52 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 113
2022.07.11 09:56:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.11 09:57:04 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.11 10:22:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:23:03 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:23:27 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
Jul 11, 2022 10:24:20 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 377
2022.07.11 10:24:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:14 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:15 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:17 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:17 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:32 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:48 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:54 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:26:54 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.11 10:27:39 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
Exception in thread "pool-3-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.11 10:27:41 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
Jul 11, 2022 10:27:48 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 718
2022.07.11 14:10:07 INFO  shutting down Metals
2022.07.13 09:45:11 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.13 09:45:15 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.13 09:45:15 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.0.
2022.07.13 09:45:17 INFO  time: initialize in 2.25s
2022.07.13 09:45:19 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.13 09:45:19 WARN  Build server is not auto-connectable.
2022.07.13 09:45:19 INFO  skipping build import with status 'Requested'
2022.07.13 09:45:23 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 09:45:33 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.13 09:45:39 INFO  time: code lens generation in 14s
2022.07.13 09:46:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 09:46:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 09:46:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 09:46:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 09:46:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 09:46:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 09:46:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.13 09:49:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 09:50:47 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
Jul 13, 2022 9:50:47 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 365
Jul 13, 2022 9:50:47 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 368
2022.07.13 09:51:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 09:51:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 09:51:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 10:00:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
Exception in thread "pool-3-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.13 10:00:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
Jul 13, 2022 10:01:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 646
2022.07.13 10:02:02 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 10:02:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 10:02:38 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 10:02:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.13 10:02:45 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\Jewellery.scala
2022.07.13 10:02:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\model\JewelleryType.scala
2022.07.13 10:03:47 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\view\SearchController.scala
2022.07.13 10:32:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 10:32:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\JewelleryType.scala
2022.07.13 10:33:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 10:34:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala.scala
2022.07.13 10:34:32 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
Jul 13, 2022 10:35:25 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 849
Jul 13, 2022 10:35:53 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 913
2022.07.13 10:35:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.13 15:12:23 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 15:14:31 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 15:14:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 15:15:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\JewelleryType.scala
2022.07.13 15:16:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 15:19:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 15:20:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 15:21:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 15:21:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 15:22:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 15:22:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
Jul 13, 2022 3:31:35 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1293
2022.07.13 15:31:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\JewelleryType.scala
2022.07.13 15:31:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.13 21:16:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:17:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:18:04 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:18:04 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:18:06 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:18:28 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:21:11 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:22:31 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:23:15 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:27:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:27:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:27:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:27:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:27:59 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:30:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:31:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:33:03 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.13 21:33:15 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.13 21:33:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.13 21:33:44 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:33:44 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.13 21:33:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.13 21:35:03 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:35:34 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
Exception in thread "pool-3-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-7" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.13 21:37:15 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:37:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:41:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.13 21:47:02 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.13 21:48:11 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\JewelleryEditDialogController.scala
2022.07.13 22:08:33 INFO  shutting down Metals
2022.07.14 10:08:17 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.14 10:08:19 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.14 10:08:19 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.1.
2022.07.14 10:08:20 INFO  time: initialize in 0.97s
2022.07.14 10:08:20 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.14 10:08:21 WARN  Build server is not auto-connectable.
2022.07.14 10:08:21 INFO  skipping build import with status 'Requested'
2022.07.14 10:08:23 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.14 10:08:30 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.14 10:08:33 INFO  time: code lens generation in 8.61s
2022.07.14 10:08:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.14 10:09:03 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.14 10:09:09 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.14 10:09:25 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
Jul 14, 2022 10:09:25 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 21
2022.07.14 10:17:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:17:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:17:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:17:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:17:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.14 10:17:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.14 10:18:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.14 10:18:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.14 10:19:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:19:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.14 10:19:43 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:19:55 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:21:37 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.14 10:21:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.14 10:21:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:22:15 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:22:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:28:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
Jul 14, 2022 10:34:11 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: 5 is not a valid line number, allowed [0..3]
	at scala.meta.internal.inputs.InternalInput.lineToOffset(InternalInput.scala:37)
	at scala.meta.internal.inputs.InternalInput.lineToOffset$(InternalInput.scala:32)
	at scala.meta.inputs.Input$VirtualFile.lineToOffset(Input.scala:80)
	at scala.meta.inputs.Position$Range$.apply(Position.scala:59)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionPositionLspInverse.toMeta(MtagsEnrichments.scala:179)
	at scala.meta.internal.parsing.Trees.$anonfun$findLastEnclosingAt$4(Trees.scala:77)
	at scala.Option.flatMap(Option.scala:283)
	at scala.meta.internal.parsing.Trees.findLastEnclosingAt(Trees.scala:76)
	at scala.meta.internal.metals.codeactions.PatternMatchRefactor.contribute(PatternMatchRefactor.scala:96)
	at scala.meta.internal.metals.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:66)
	at scala.meta.internal.metals.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:65)
	at scala.collection.immutable.List.collect(List.scala:275)
	at scala.meta.internal.metals.CodeActionProvider.codeActions(CodeActionProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeAction$1(MetalsLanguageServer.scala:1652)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLanguageServer.codeAction(MetalsLanguageServer.scala:1651)
	... 15 more

Jul 14, 2022 10:34:17 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: 5 is not a valid line number, allowed [0..3]
	at scala.meta.internal.inputs.InternalInput.lineToOffset(InternalInput.scala:37)
	at scala.meta.internal.inputs.InternalInput.lineToOffset$(InternalInput.scala:32)
	at scala.meta.inputs.Input$VirtualFile.lineToOffset(Input.scala:80)
	at scala.meta.inputs.Position$Range$.apply(Position.scala:59)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionPositionLspInverse.toMeta(MtagsEnrichments.scala:179)
	at scala.meta.internal.parsing.Trees.$anonfun$findLastEnclosingAt$4(Trees.scala:77)
	at scala.Option.flatMap(Option.scala:283)
	at scala.meta.internal.parsing.Trees.findLastEnclosingAt(Trees.scala:76)
	at scala.meta.internal.metals.codeactions.PatternMatchRefactor.contribute(PatternMatchRefactor.scala:96)
	at scala.meta.internal.metals.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:66)
	at scala.meta.internal.metals.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:65)
	at scala.collection.immutable.List.collect(List.scala:275)
	at scala.meta.internal.metals.CodeActionProvider.codeActions(CodeActionProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeAction$1(MetalsLanguageServer.scala:1652)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLanguageServer.codeAction(MetalsLanguageServer.scala:1651)
	... 15 more

2022.07.14 10:34:28 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:34:32 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:34:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:34:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:35:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:35:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:36:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:36:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.14 10:36:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
Exception in thread "pool-3-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.14 10:37:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:37:47 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
Exception in thread "pool-3-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.14 10:40:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:40:44 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:42:01 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:42:01 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:42:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:48:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:48:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:53:08 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:53:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:53:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.14 10:58:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.14 10:58:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\JewelleryEditDialogController.scala
2022.07.14 10:59:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:01:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:03:38 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:03:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:03:41 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:03:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Jul 14, 2022 11:04:48 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1070
Exception in thread "pool-3-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.14 11:05:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:05:59 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:06:39 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:07:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:09:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:12:45 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:13:06 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:13:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:13:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:14:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:15:38 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:15:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:15:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:16:04 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:21:21 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 11:37:25 INFO  shutting down Metals
2022.07.14 18:54:31 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.14 18:54:34 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.14 18:54:34 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.1.
2022.07.14 18:54:36 INFO  time: initialize in 2.21s
2022.07.14 18:54:36 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.14 18:54:36 WARN  Build server is not auto-connectable.
2022.07.14 18:54:37 INFO  skipping build import with status 'Requested'
2022.07.14 18:54:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 18:54:44 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.14 18:54:48 INFO  time: code lens generation in 8.81s
2022.07.14 18:56:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Jul 14, 2022 6:57:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 48
2022.07.14 18:57:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Exception in thread "pool-3-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-7" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-8" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-9" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-10" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-11" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.14 18:57:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Jul 14, 2022 6:57:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 174
2022.07.14 18:58:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 18:58:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Jul 14, 2022 6:59:05 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 312
Jul 14, 2022 6:59:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 357
Exception in thread "pool-3-thread-12" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Jul 14, 2022 6:59:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 431
2022.07.14 18:59:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 19:01:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Jul 14, 2022 9:32:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 629
2022.07.14 21:32:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:37:23 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.14 21:38:17 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:41:53 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:42:08 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:42:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:42:43 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Jul 14, 2022 9:43:34 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 855
2022.07.14 21:43:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:43:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.14 21:44:17 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:44:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:47:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:48:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:48:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:49:59 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:51:02 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:53:59 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Exception in thread "pool-3-thread-13" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.14 21:54:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:55:02 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:55:38 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Jul 14, 2022 9:55:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1498
2022.07.14 21:55:45 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:57:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 21:57:44 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.14 22:00:34 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 22:05:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 22:05:34 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.14 22:05:39 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.14 22:05:41 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.14 22:08:25 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 22:08:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.14 22:14:38 INFO  shutting down Metals
2022.07.15 09:44:15 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.15 09:44:17 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.15 09:44:17 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.1.
2022.07.15 09:44:18 INFO  time: initialize in 0.87s
2022.07.15 09:44:18 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.15 09:44:18 WARN  Build server is not auto-connectable.
2022.07.15 09:44:18 INFO  skipping build import with status 'Requested'
2022.07.15 09:44:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 09:44:24 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.15 09:44:28 INFO  time: code lens generation in 6.7s
2022.07.15 10:12:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:13:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:13:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:14:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:14:32 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:14:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
Jul 15, 2022 10:14:42 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 90
2022.07.15 10:14:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.15 10:15:27 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.15 10:15:28 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.15 10:15:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.15 10:18:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:18:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:19:21 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:19:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:19:48 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:19:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:20:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:21:02 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:21:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:22:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.15 10:22:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:23:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 10:25:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:04:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.15 14:05:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:05:14 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:05:27 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:06:15 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.15 14:06:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:07:01 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.15 14:08:43 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:08:53 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:12:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:12:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:12:55 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:13:21 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:13:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:13:49 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:13:53 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:21:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:21:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:24:59 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:25:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:26:09 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Jul 15, 2022 2:26:24 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: class dotty.tools.dotc.core.Symbols$NoSymbol$ cannot be cast to class dotty.tools.dotc.core.Symbols$ClassSymbol (dotty.tools.dotc.core.Symbols$NoSymbol$ and dotty.tools.dotc.core.Symbols$ClassSymbol are in unnamed module of loader java.net.URLClassLoader @663eacd0)
java.lang.ClassCastException: class dotty.tools.dotc.core.Symbols$NoSymbol$ cannot be cast to class dotty.tools.dotc.core.Symbols$ClassSymbol (dotty.tools.dotc.core.Symbols$NoSymbol$ and dotty.tools.dotc.core.Symbols$ClassSymbol are in unnamed module of loader java.net.URLClassLoader @663eacd0)
	at dotty.tools.dotc.core.Symbols$Symbol.asClass(Symbols.scala:178)
	at scala.meta.internal.pc.MetalsInteractive$.enclosingSymbolsWithExpressionType(MetalsInteractive.scala:194)
	at scala.meta.internal.pc.MetalsInteractive$.enclosingSymbols(MetalsInteractive.scala:171)
	at scala.meta.internal.pc.PcDefinitionProvider.findDefinitions(PcDefinitionProvider.scala:62)
	at scala.meta.internal.pc.PcDefinitionProvider.definitions(PcDefinitionProvider.scala:51)

2022.07.15 14:26:25 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:29:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.15 14:33:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:33:26 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:33:48 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:36:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 14:36:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.15 14:37:31 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.15 14:42:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:07:37 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:09:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.15 15:09:32 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:09:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.15 15:11:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:11:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:11:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:11:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:12 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:12 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:12 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:12 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:15 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:15 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:12:21 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:13:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:15:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:15:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:16:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:19:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.15 15:37:57 INFO  shutting down Metals
2022.07.18 21:41:29 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.18 21:41:38 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.18 21:41:38 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.1.
2022.07.18 21:41:42 INFO  time: initialize in 4.49s
2022.07.18 21:41:43 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.18 21:41:43 WARN  Build server is not auto-connectable.
2022.07.18 21:41:45 INFO  skipping build import with status 'Requested'
2022.07.18 21:41:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.18 21:42:04 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.18 21:42:13 INFO  time: code lens generation in 18s
2022.07.18 21:46:06 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:46:49 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
Jul 18, 2022 9:47:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 80
2022.07.18 21:47:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:47:41 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:47:54 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:48:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:48:25 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
Jul 18, 2022 9:49:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 198
2022.07.18 21:49:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:50:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:50:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:51:03 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:51:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:51:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:51:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:52:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:54:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 21:55:27 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.18 22:01:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.18 22:03:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.18 22:04:14 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.18 22:06:06 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Jul 18, 2022 10:12:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 656
2022.07.18 22:13:23 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.18 22:14:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.18 22:22:45 INFO  shutting down Metals
2022.07.21 15:10:11 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.21 15:10:20 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.21 15:10:20 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.2.
2022.07.21 15:10:24 INFO  time: initialize in 4.32s
2022.07.21 15:10:28 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.21 15:10:29 WARN  Build server is not auto-connectable.
2022.07.21 15:10:30 INFO  skipping build import with status 'Requested'
2022.07.21 15:10:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.21 15:10:50 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.21 15:10:58 INFO  time: code lens generation in 20s
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.21 15:16:06 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Exception in thread "pool-3-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Jul 21, 2022 3:17:04 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 131
2022.07.21 15:17:25 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.21 15:17:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.21 15:18:03 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.21 15:18:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.21 15:18:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.21 15:19:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.21 15:20:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.21 15:23:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
Exception in thread "pool-3-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.21 15:23:23 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.21 15:23:26 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.21 15:23:44 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.21 15:31:34 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Jul 21, 2022 3:35:51 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 530
2022.07.21 15:40:54 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.21 15:41:41 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.21 15:42:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.21 15:43:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.21 15:44:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.21 15:46:08 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.21 15:46:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.21 15:47:08 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.21 15:48:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.21 15:51:02 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.21 15:51:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
Jul 21, 2022 3:52:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 825
2022.07.21 15:54:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.21 15:54:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.21 15:55:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
Jul 21, 2022 3:55:03 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 894
2022.07.21 15:55:04 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.21 15:55:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.21 16:07:16 INFO  shutting down Metals
2022.07.21 21:39:34 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.21 21:39:36 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.21 21:39:36 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.2.
2022.07.21 21:39:37 INFO  time: initialize in 0.8s
2022.07.21 21:39:37 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.21 21:39:37 WARN  Build server is not auto-connectable.
2022.07.21 21:39:38 INFO  skipping build import with status 'Requested'
2022.07.21 21:39:39 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.21 21:39:42 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.21 21:39:44 INFO  time: code lens generation in 4.35s
2022.07.21 21:41:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.21 21:41:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.21 21:41:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.21 21:51:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.21 21:51:38 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.21 21:52:01 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.21 21:54:48 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.21 21:55:41 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.21 21:57:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.21 22:15:47 INFO  shutting down Metals
2022.07.22 09:40:38 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.22 09:40:42 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.22 09:40:42 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.2.
2022.07.22 09:40:44 INFO  time: initialize in 2.47s
2022.07.22 09:40:44 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.22 09:40:46 WARN  Build server is not auto-connectable.
2022.07.22 09:40:46 INFO  skipping build import with status 'Requested'
2022.07.22 09:40:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 09:41:03 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.22 09:41:08 INFO  time: code lens generation in 13s
2022.07.22 09:43:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
Jul 22, 2022 9:43:46 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5
2022.07.22 09:44:32 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 09:44:59 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 09:45:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Jul 22, 2022 9:45:37 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 43
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.22 09:48:59 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 09:49:12 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 10:01:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:07:08 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:07:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:07:57 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:09:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:09:23 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.22 10:15:58 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.22 10:21:01 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.22 10:21:56 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.22 10:22:12 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.22 10:22:53 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.22 10:23:17 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.22 10:23:17 INFO  skipping build import with status 'Dismissed'
2022.07.22 10:23:26 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.22 10:23:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 10:31:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.22 10:31:23 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.22 10:31:37 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.22 10:38:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
Exception in thread "pool-3-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-7" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Jul 22, 2022 10:39:17 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 710
2022.07.22 10:39:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 10:41:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 10:41:39 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:41:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:41:53 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:41:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:42:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:42:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:43:03 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 10:48:06 INFO  shutting down Metals
2022.07.22 10:55:51 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.22 10:55:54 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.22 10:55:54 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.2.
2022.07.22 10:55:56 INFO  time: initialize in 1.55s
2022.07.22 10:55:56 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.22 10:55:56 WARN  Build server is not auto-connectable.
2022.07.22 10:55:59 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 10:56:03 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.22 10:56:07 INFO  time: code lens generation in 6.44s
2022.07.22 10:57:59 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 11:43:44 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 11:44:11 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 11:44:58 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 11:45:28 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 11:45:47 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 11:46:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 11:48:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
Jul 22, 2022 11:48:19 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 276
2022.07.22 11:48:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 11:49:13 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.22 11:49:21 WARN  no build target for: C:\Users\almir\AdminApp\build.sbt
2022.07.22 11:49:21 INFO  skipping build import with status 'Requested'
2022.07.22 11:55:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 11:56:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 11:56:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 11:56:28 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 13:52:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 14:57:41 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:05:02 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:06:21 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.22 15:06:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:06:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:07:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
Jul 22, 2022 3:08:51 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 505
2022.07.22 15:10:49 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:11:27 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:11:28 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
Exception in thread "pool-3-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-7" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.22 15:12:49 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:12:49 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:12:49 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
Exception in thread "pool-3-thread-8" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.22 15:12:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:12:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:12:54 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:13:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:13:40 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:14:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 15:16:09 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:16:33 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:17:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:17:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:17:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:17:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:17:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:17:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:17:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:17:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:17:34 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:17:34 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
Exception in thread "pool-3-thread-9" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.22 15:18:37 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
Exception in thread "pool-3-thread-10" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Exception in thread "pool-3-thread-11" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.22 15:18:55 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 15:19:02 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 15:19:14 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 15:20:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:30:11 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 15:30:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 15:30:55 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 15:30:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 15:31:01 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 15:31:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 15:31:45 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 15:33:18 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 15:33:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 15:34:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 16:17:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:19:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 16:20:15 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 16:20:41 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 16:21:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 16:33:19 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:35:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 16:38:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 16:39:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:39:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.22 16:40:21 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 16:40:53 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 16:41:27 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 16:41:27 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 16:43:09 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:43:28 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:44:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:45:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:45:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:46:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 16:46:37 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:47:28 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:47:47 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:47:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:48:23 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:48:38 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:49:49 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:50:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:50:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:51:02 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 16:53:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 16:53:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 16:53:49 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 21:23:03 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 21:23:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 21:26:28 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 21:26:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 21:26:55 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 21:28:03 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 21:28:17 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 21:28:39 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 21:32:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 21:39:08 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 21:39:41 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 21:41:13 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 21:41:47 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.22 21:42:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 21:43:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 21:43:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 21:44:51 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 21:45:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 21:45:32 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 21:46:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 21:46:32 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.22 22:05:00 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 22:06:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.22 22:17:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MenuController.scala
2022.07.22 22:18:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 22:18:47 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 22:18:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MenuController.scala
2022.07.22 22:20:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MenuController.scala
2022.07.22 22:21:11 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MenuController.scala
2022.07.22 22:21:41 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 22:31:25 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MenuController.scala
2022.07.22 22:31:35 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MenuController.scala
2022.07.22 22:33:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 22:34:27 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.22 22:43:56 INFO  shutting down Metals
2022.07.23 15:29:45 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.23 15:29:48 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.23 15:29:48 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.2.
2022.07.23 15:29:51 INFO  time: initialize in 2.27s
2022.07.23 15:29:51 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.23 15:29:52 WARN  Build server is not auto-connectable.
2022.07.23 15:29:53 INFO  skipping build import with status 'Requested'
2022.07.23 15:29:56 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.23 15:30:04 INFO  no build target found for C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.23 15:30:59 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.23 15:31:06 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MenuController.scala
2022.07.23 15:31:11 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MenuController.scala
2022.07.23 16:06:04 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.23 16:06:32 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.23 16:11:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 16:16:27 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\model\Jewellery.scala
2022.07.23 16:39:36 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\util\Database.scala
2022.07.23 16:51:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MainController.scala
2022.07.23 16:52:09 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\MenuController.scala
2022.07.23 16:58:49 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 16:58:50 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.23 17:05:07 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.23 17:05:10 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.23 17:05:52 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.23 17:17:16 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.23 17:17:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\MainApp.scala
2022.07.23 17:28:46 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 17:29:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 17:32:22 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 18:06:24 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 18:26:42 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 18:38:29 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 18:39:05 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:196)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
2022.07.23 18:39:12 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 18:39:20 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 18:39:26 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 18:39:30 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 18:39:34 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\SearchController.scala
2022.07.23 22:24:36 WARN  no build target for: C:\Users\almir\AdminApp\plugin.sbt
2022.07.23 22:25:01 WARN  no build target for: C:\Users\almir\AdminApp\plugin.sbt
2022.07.23 22:36:13 WARN  no build target for: C:\Users\almir\AdminApp\plugin.sbt
2022.07.23 22:38:04 WARN  no build target for: C:\Users\almir\AdminApp\bin\project\plugin.sbt
2022.07.23 22:39:16 INFO  shutting down Metals
2022.07.23 22:42:23 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\almir\AdminApp\.metals\lsp.trace.json or C:\Users\almir\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.07.23 22:42:27 INFO  logging to file C:\Users\almir\AdminApp\.metals\metals.log
2022.07.23 22:42:27 INFO  Started: Metals version 0.11.7 in workspace 'C:\Users\almir\AdminApp' for client Visual Studio Code 1.69.2.
2022.07.23 22:42:31 INFO  time: initialize in 3.17s
2022.07.23 22:42:32 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.07.23 22:42:32 WARN  Build server is not auto-connectable.
2022.07.23 22:42:37 WARN  no build target for: C:\Users\almir\AdminApp\src\main\scala\ch\makery\address\view\AddController.scala
2022.07.23 22:42:37 WARN  no build target for: C:\Users\almir\AdminApp\plugin.sbt
2022.07.23 22:42:43 INFO  no build target found for C:\Users\almir\AdminApp\plugin.sbt. Using presentation compiler with project's scala-library version: 3.1.3
2022.07.23 22:42:46 INFO  time: code lens generation in 8.24s
2022.07.23 22:44:23 WARN  no build target for: C:\Users\almir\AdminApp\assembly.sbt
2022.07.23 22:46:04 WARN  no build target for: C:\Users\almir\AdminApp\bin\project\assembly.sbt
2022.07.23 22:46:23 WARN  no build target for: C:\Users\almir\AdminApp\bin\project\assembly.sbt
2022.07.23 22:47:23 WARN  no build target for: C:\Users\almir\AdminApp\assembly.sbt
2022.07.23 22:50:13 ERROR text document: file:///c:/Users/almir/AdminApp/assembly.sbtjava.nio.file.NoSuchFileException: c:\Users\almir\AdminApp\assembly.sbt
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.nio.file.Files.newByteChannel(Files.java:375)
	at java.nio.file.Files.newByteChannel(Files.java:426)
	at java.nio.file.Files.readAllBytes(Files.java:3272)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$2(InteractiveSemanticdbs.scala:90)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$1(InteractiveSemanticdbs.scala:90)
	at java.util.HashMap.compute(HashMap.java:1320)
	at java.util.Collections$SynchronizedMap.compute(Collections.java:2732)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:89)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:63)
	at scala.meta.internal.metals.AggregateSemanticdbs.loop$1(AggregateSemanticdbs.scala:30)
	at scala.meta.internal.metals.AggregateSemanticdbs.textDocument(AggregateSemanticdbs.scala:36)
	at scala.meta.internal.metals.CodeLensProvider.findLenses(CodeLensProvider.scala:22)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$2(MetalsLanguageServer.scala:1665)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$1(MetalsLanguageServer.scala:1663)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:678)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.lang.Thread.run(Thread.java:831)

2022.07.23 22:50:14 ERROR text document: file:///c:/Users/almir/AdminApp/assembly.sbtjava.nio.file.NoSuchFileException: c:\Users\almir\AdminApp\assembly.sbt
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.nio.file.Files.newByteChannel(Files.java:375)
	at java.nio.file.Files.newByteChannel(Files.java:426)
	at java.nio.file.Files.readAllBytes(Files.java:3272)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$2(InteractiveSemanticdbs.scala:90)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$1(InteractiveSemanticdbs.scala:90)
	at java.util.HashMap.compute(HashMap.java:1320)
	at java.util.Collections$SynchronizedMap.compute(Collections.java:2732)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:89)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:63)
	at scala.meta.internal.metals.AggregateSemanticdbs.loop$1(AggregateSemanticdbs.scala:30)
	at scala.meta.internal.metals.AggregateSemanticdbs.textDocument(AggregateSemanticdbs.scala:36)
	at scala.meta.internal.metals.MetalsLanguageServer.definitionOrReferences(MetalsLanguageServer.scala:2509)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$definition$1(MetalsLanguageServer.scala:1435)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLanguageServer.definition(MetalsLanguageServer.scala:1434)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.lang.Thread.run(Thread.java:831)

2022.07.23 22:50:14 WARN  code navigation does not work for the file 'c:\Users\almir\AdminApp\assembly.sbt' because it doesn't belong to a build target.
2022.07.23 22:50:14 ERROR text document: file:///c:/Users/almir/AdminApp/assembly.sbtjava.nio.file.NoSuchFileException: c:\Users\almir\AdminApp\assembly.sbt
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.nio.file.Files.newByteChannel(Files.java:375)
	at java.nio.file.Files.newByteChannel(Files.java:426)
	at java.nio.file.Files.readAllBytes(Files.java:3272)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$2(InteractiveSemanticdbs.scala:90)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$1(InteractiveSemanticdbs.scala:90)
	at java.util.HashMap.compute(HashMap.java:1320)
	at java.util.Collections$SynchronizedMap.compute(Collections.java:2732)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:89)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:63)
	at scala.meta.internal.metals.AggregateSemanticdbs.loop$1(AggregateSemanticdbs.scala:30)
	at scala.meta.internal.metals.AggregateSemanticdbs.textDocument(AggregateSemanticdbs.scala:36)
	at scala.meta.internal.metals.DefinitionProvider.definition(DefinitionProvider.scala:77)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$definitionResult$1(MetalsLanguageServer.scala:2575)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLanguageServer.definitionResult(MetalsLanguageServer.scala:2575)
	at scala.meta.internal.metals.MetalsLanguageServer.definitionOrReferences(MetalsLanguageServer.scala:2551)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$definition$1(MetalsLanguageServer.scala:1435)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLanguageServer.definition(MetalsLanguageServer.scala:1434)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.lang.Thread.run(Thread.java:831)

2022.07.23 22:50:14 ERROR text document: file:///c:/Users/almir/AdminApp/assembly.sbtjava.nio.file.NoSuchFileException: c:\Users\almir\AdminApp\assembly.sbt
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.nio.file.Files.newByteChannel(Files.java:375)
	at java.nio.file.Files.newByteChannel(Files.java:426)
	at java.nio.file.Files.readAllBytes(Files.java:3272)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$2(InteractiveSemanticdbs.scala:90)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$1(InteractiveSemanticdbs.scala:90)
	at java.util.HashMap.compute(HashMap.java:1320)
	at java.util.Collections$SynchronizedMap.compute(Collections.java:2732)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:89)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:63)
	at scala.meta.internal.metals.AggregateSemanticdbs.loop$1(AggregateSemanticdbs.scala:30)
	at scala.meta.internal.metals.AggregateSemanticdbs.textDocument(AggregateSemanticdbs.scala:36)
	at scala.meta.internal.metals.CodeLensProvider.findLenses(CodeLensProvider.scala:22)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$2(MetalsLanguageServer.scala:1665)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$1(MetalsLanguageServer.scala:1663)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:678)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.lang.Thread.run(Thread.java:831)

2022.07.23 22:50:16 ERROR text document: file:///c:/Users/almir/AdminApp/assembly.sbtjava.nio.file.NoSuchFileException: c:\Users\almir\AdminApp\assembly.sbt
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.nio.file.Files.newByteChannel(Files.java:375)
	at java.nio.file.Files.newByteChannel(Files.java:426)
	at java.nio.file.Files.readAllBytes(Files.java:3272)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$2(InteractiveSemanticdbs.scala:90)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$1(InteractiveSemanticdbs.scala:90)
	at java.util.HashMap.compute(HashMap.java:1320)
	at java.util.Collections$SynchronizedMap.compute(Collections.java:2732)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:89)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:63)
	at scala.meta.internal.metals.AggregateSemanticdbs.loop$1(AggregateSemanticdbs.scala:30)
	at scala.meta.internal.metals.AggregateSemanticdbs.textDocument(AggregateSemanticdbs.scala:36)
	at scala.meta.internal.metals.MetalsLanguageServer.definitionOrReferences(MetalsLanguageServer.scala:2509)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$definition$1(MetalsLanguageServer.scala:1435)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLanguageServer.definition(MetalsLanguageServer.scala:1434)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.lang.Thread.run(Thread.java:831)

2022.07.23 22:50:16 WARN  code navigation does not work for the file 'c:\Users\almir\AdminApp\assembly.sbt' because it doesn't belong to a build target.
2022.07.23 22:50:16 ERROR text document: file:///c:/Users/almir/AdminApp/assembly.sbtjava.nio.file.NoSuchFileException: c:\Users\almir\AdminApp\assembly.sbt
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.nio.file.Files.newByteChannel(Files.java:375)
	at java.nio.file.Files.newByteChannel(Files.java:426)
	at java.nio.file.Files.readAllBytes(Files.java:3272)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$2(InteractiveSemanticdbs.scala:90)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$1(InteractiveSemanticdbs.scala:90)
	at java.util.HashMap.compute(HashMap.java:1320)
	at java.util.Collections$SynchronizedMap.compute(Collections.java:2732)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:89)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:63)
	at scala.meta.internal.metals.AggregateSemanticdbs.loop$1(AggregateSemanticdbs.scala:30)
	at scala.meta.internal.metals.AggregateSemanticdbs.textDocument(AggregateSemanticdbs.scala:36)
	at scala.meta.internal.metals.DefinitionProvider.definition(DefinitionProvider.scala:77)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$definitionResult$1(MetalsLanguageServer.scala:2575)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLanguageServer.definitionResult(MetalsLanguageServer.scala:2575)
	at scala.meta.internal.metals.MetalsLanguageServer.definitionOrReferences(MetalsLanguageServer.scala:2551)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$definition$1(MetalsLanguageServer.scala:1435)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLanguageServer.definition(MetalsLanguageServer.scala:1434)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.lang.Thread.run(Thread.java:831)

2022.07.23 22:50:17 ERROR text document: file:///c:/Users/almir/AdminApp/assembly.sbtjava.nio.file.NoSuchFileException: c:\Users\almir\AdminApp\assembly.sbt
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
	at java.nio.file.Files.newByteChannel(Files.java:375)
	at java.nio.file.Files.newByteChannel(Files.java:426)
	at java.nio.file.Files.readAllBytes(Files.java:3272)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$2(InteractiveSemanticdbs.scala:90)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$1(InteractiveSemanticdbs.scala:90)
	at java.util.HashMap.compute(HashMap.java:1320)
	at java.util.Collections$SynchronizedMap.compute(Collections.java:2732)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:89)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:63)
	at scala.meta.internal.metals.AggregateSemanticdbs.loop$1(AggregateSemanticdbs.scala:30)
	at scala.meta.internal.metals.AggregateSemanticdbs.textDocument(AggregateSemanticdbs.scala:36)
	at scala.meta.internal.metals.CodeLensProvider.findLenses(CodeLensProvider.scala:22)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$2(MetalsLanguageServer.scala:1665)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$1(MetalsLanguageServer.scala:1663)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:678)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.lang.Thread.run(Thread.java:831)

2022.07.23 22:50:17 WARN  no build target for: C:\Users\almir\AdminApp\assembly.sbt
2022.07.23 22:50:28 WARN  no build target for: C:\Users\almir\AdminApp\project\plugin.sbt
2022.07.23 22:50:35 WARN  no build target for: C:\Users\almir\AdminApp\project\plugin.sbt
2022.07.23 22:50:35 INFO  skipping build import with status 'Dismissed'
2022.07.23 22:50:40 WARN  no build target for: C:\Users\almir\AdminApp\project\plugin.sbt
2022.07.23 22:50:40 INFO  skipping build import with status 'Dismissed'
